
Sprint3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  0000239c  00002430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000239c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000426  0080014c  0080014c  0000247c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00002518  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004399  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d5f  00000000  00000000  00006bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000242c  00000000  00000000  00007950  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b14  00000000  00000000  00009d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d4c  00000000  00000000  0000a890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000042b9  00000000  00000000  0000b5dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000f895  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__ctors_end>
       4:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_1>
       8:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
       c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      10:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      14:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_5>
      18:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      1c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_7>
      20:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      24:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      28:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__vector_10>
      2c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      30:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      34:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      38:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      3c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      40:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      44:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      48:	0c 94 08 04 	jmp	0x810	; 0x810 <__vector_18>
      4c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      50:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      54:	0c 94 19 03 	jmp	0x632	; 0x632 <__vector_21>
      58:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      5c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      60:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      64:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>

00000068 <Font5x8>:
      68:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
      78:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
      88:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
      98:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
      a8:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
      b8:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
      c8:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
      d8:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
      e8:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
      f8:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     108:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     118:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     128:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     138:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     148:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     158:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     168:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     178:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     188:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     198:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     1a8:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     1b8:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     1c8:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     1d8:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     1e8:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     1f8:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     208:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     218:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     228:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     238:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     248:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     258:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     268:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     278:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     288:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     298:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

000002a8 <__ctors_end>:
     2a8:	11 24       	eor	r1, r1
     2aa:	1f be       	out	0x3f, r1	; 63
     2ac:	cf ef       	ldi	r28, 0xFF	; 255
     2ae:	d8 e0       	ldi	r29, 0x08	; 8
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	cd bf       	out	0x3d, r28	; 61

000002b4 <__do_copy_data>:
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	a0 e0       	ldi	r26, 0x00	; 0
     2b8:	b1 e0       	ldi	r27, 0x01	; 1
     2ba:	ec e9       	ldi	r30, 0x9C	; 156
     2bc:	f3 e2       	ldi	r31, 0x23	; 35
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x10>
     2c0:	05 90       	lpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	ac 34       	cpi	r26, 0x4C	; 76
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0xc>

000002ca <__do_clear_bss>:
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	ac e4       	ldi	r26, 0x4C	; 76
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	a2 37       	cpi	r26, 0x72	; 114
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 44 06 	call	0xc88	; 0xc88 <main>
     2de:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <_exit>

000002e2 <__bad_interrupt>:
     2e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e6 <__vector_1>:
uint8_t contador_AD = 0;
uint16_t ultima_manut =0;


ISR(INT0_vect)
{
     2e6:	1f 92       	push	r1
     2e8:	0f 92       	push	r0
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	0f 92       	push	r0
     2ee:	11 24       	eor	r1, r1
     2f0:	8f 93       	push	r24
     2f2:	9f 93       	push	r25
	sensor_pneu++;  //sensor que controla quantidade de voltas do pneu por intervalo de medição
     2f4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sensor_pneu>
     2f8:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <sensor_pneu+0x1>
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <sensor_pneu+0x1>
     302:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <sensor_pneu>
}
     306:	9f 91       	pop	r25
     308:	8f 91       	pop	r24
     30a:	0f 90       	pop	r0
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	0f 90       	pop	r0
     310:	1f 90       	pop	r1
     312:	18 95       	reti

00000314 <__vector_5>:
ISR(PCINT2_vect)
{
     314:	1f 92       	push	r1
     316:	0f 92       	push	r0
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	0f 92       	push	r0
     31c:	11 24       	eor	r1, r1
     31e:	2f 93       	push	r18
     320:	3f 93       	push	r19
     322:	4f 93       	push	r20
     324:	5f 93       	push	r21
     326:	6f 93       	push	r22
     328:	7f 93       	push	r23
     32a:	8f 93       	push	r24
     32c:	9f 93       	push	r25
     32e:	af 93       	push	r26
     330:	bf 93       	push	r27
     332:	ef 93       	push	r30
     334:	ff 93       	push	r31
	if ((PIND&0b01000000)==0)
     336:	4e 99       	sbic	0x09, 6	; 9
     338:	04 c0       	rjmp	.+8      	; 0x342 <__vector_5+0x2e>
		Marcha = 68;//D em ascii
     33a:	84 e4       	ldi	r24, 0x44	; 68
     33c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <Marcha>
     340:	03 c0       	rjmp	.+6      	; 0x348 <__vector_5+0x34>
	else
		Marcha = 82;//R em ascii
     342:	82 e5       	ldi	r24, 0x52	; 82
     344:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <Marcha>
	if ((PIND&0b10000000)==0)
     348:	4f 99       	sbic	0x09, 7	; 9
     34a:	03 c0       	rjmp	.+6      	; 0x352 <__vector_5+0x3e>
		Marcha = 80;//P em ascii
     34c:	80 e5       	ldi	r24, 0x50	; 80
     34e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <Marcha>
	
	if ((PIND&0b00001000)==0)
     352:	4b 99       	sbic	0x09, 3	; 9
     354:	14 c0       	rjmp	.+40     	; 0x37e <__vector_5+0x6a>
	{
		if(diametro_pneu < 200) //Incremento apenas se diâmetro não exceder o máximo
     356:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <diametro_pneu>
     35a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <diametro_pneu+0x1>
     35e:	88 3c       	cpi	r24, 0xC8	; 200
     360:	91 05       	cpc	r25, r1
     362:	28 f4       	brcc	.+10     	; 0x36e <__vector_5+0x5a>
			diametro_pneu++;
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <diametro_pneu+0x1>
     36a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <diametro_pneu>
		eeprom_write_word (5, diametro_pneu); //altera valor na memória quando diametro for alterado
     36e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <diametro_pneu>
     372:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <diametro_pneu+0x1>
     376:	85 e0       	ldi	r24, 0x05	; 5
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 72 11 	call	0x22e4	; 0x22e4 <eeprom_write_word>
	}
	if ((PIND&0b00010000)==0)
     37e:	4c 99       	sbic	0x09, 4	; 9
     380:	14 c0       	rjmp	.+40     	; 0x3aa <__vector_5+0x96>
	{
		if(diametro_pneu > 30) //Decremento apenas se diâmetro for maior que o mínimo
     382:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <diametro_pneu>
     386:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <diametro_pneu+0x1>
     38a:	8f 31       	cpi	r24, 0x1F	; 31
     38c:	91 05       	cpc	r25, r1
     38e:	28 f0       	brcs	.+10     	; 0x39a <__vector_5+0x86>
			diametro_pneu--;
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <diametro_pneu+0x1>
     396:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <diametro_pneu>
		eeprom_write_word (5, diametro_pneu); //altera valor na memória quando diametro for alterado
     39a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <diametro_pneu>
     39e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <diametro_pneu+0x1>
     3a2:	85 e0       	ldi	r24, 0x05	; 5
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 72 11 	call	0x22e4	; 0x22e4 <eeprom_write_word>
	}
	
}
     3aa:	ff 91       	pop	r31
     3ac:	ef 91       	pop	r30
     3ae:	bf 91       	pop	r27
     3b0:	af 91       	pop	r26
     3b2:	9f 91       	pop	r25
     3b4:	8f 91       	pop	r24
     3b6:	7f 91       	pop	r23
     3b8:	6f 91       	pop	r22
     3ba:	5f 91       	pop	r21
     3bc:	4f 91       	pop	r20
     3be:	3f 91       	pop	r19
     3c0:	2f 91       	pop	r18
     3c2:	0f 90       	pop	r0
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	0f 90       	pop	r0
     3c8:	1f 90       	pop	r1
     3ca:	18 95       	reti

000003cc <__vector_7>:
ISR(TIMER2_COMPA_vect) //interrupção do TC2 para calculo da velocidade media a cada 1ms
{
     3cc:	1f 92       	push	r1
     3ce:	0f 92       	push	r0
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	0f 92       	push	r0
     3d4:	11 24       	eor	r1, r1
     3d6:	8f 92       	push	r8
     3d8:	9f 92       	push	r9
     3da:	af 92       	push	r10
     3dc:	bf 92       	push	r11
     3de:	cf 92       	push	r12
     3e0:	df 92       	push	r13
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	2f 93       	push	r18
     3e8:	3f 93       	push	r19
     3ea:	4f 93       	push	r20
     3ec:	5f 93       	push	r21
     3ee:	6f 93       	push	r22
     3f0:	7f 93       	push	r23
     3f2:	8f 93       	push	r24
     3f4:	9f 93       	push	r25
     3f6:	af 93       	push	r26
     3f8:	bf 93       	push	r27
     3fa:	ef 93       	push	r30
     3fc:	ff 93       	push	r31
	contador_auxiliar++;//incremento no contador auxiliar de tempo
     3fe:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <contador_auxiliar>
     402:	8f 5f       	subi	r24, 0xFF	; 255
     404:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <contador_auxiliar>
	
	if (contador_auxiliar == 250) //calculo da velocidade média a cada 100*tempo_do_timer = 250*1ms = 250ms
     408:	8a 3f       	cpi	r24, 0xFA	; 250
     40a:	09 f0       	breq	.+2      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     40c:	7e c0       	rjmp	.+252    	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
	{
		velocidade_veiculo = (3.1415*diametro_pneu*sensor_pneu/(0.25/0.36))/20; //calculo da velocidade média no intervalo de tempo tomado em Km/h
     40e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <diametro_pneu>
     412:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <diametro_pneu+0x1>
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__floatunsisf>
     41e:	26 e5       	ldi	r18, 0x56	; 86
     420:	3e e0       	ldi	r19, 0x0E	; 14
     422:	49 e4       	ldi	r20, 0x49	; 73
     424:	50 e4       	ldi	r21, 0x40	; 64
     426:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__mulsf3>
     42a:	6b 01       	movw	r12, r22
     42c:	7c 01       	movw	r14, r24
     42e:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <sensor_pneu>
     432:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <sensor_pneu+0x1>
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__floatunsisf>
     43e:	4b 01       	movw	r8, r22
     440:	5c 01       	movw	r10, r24
     442:	9b 01       	movw	r18, r22
     444:	ac 01       	movw	r20, r24
     446:	c7 01       	movw	r24, r14
     448:	b6 01       	movw	r22, r12
     44a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__mulsf3>
     44e:	6b 01       	movw	r12, r22
     450:	7c 01       	movw	r14, r24
     452:	2c e1       	ldi	r18, 0x1C	; 28
     454:	37 ec       	ldi	r19, 0xC7	; 199
     456:	41 e3       	ldi	r20, 0x31	; 49
     458:	5f e3       	ldi	r21, 0x3F	; 63
     45a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__divsf3>
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	40 ea       	ldi	r20, 0xA0	; 160
     464:	51 e4       	ldi	r21, 0x41	; 65
     466:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__divsf3>
     46a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fixunssfsi>
     46e:	70 93 60 01 	sts	0x0160, r23	; 0x800160 <velocidade_veiculo+0x1>
     472:	60 93 5f 01 	sts	0x015F, r22	; 0x80015f <velocidade_veiculo>
		RPM = sensor_pneu/(0.25/(60/2));//calculo de voltas completas dividido pelo tempo gasto
     476:	29 e8       	ldi	r18, 0x89	; 137
     478:	38 e8       	ldi	r19, 0x88	; 136
     47a:	48 e0       	ldi	r20, 0x08	; 8
     47c:	5c e3       	ldi	r21, 0x3C	; 60
     47e:	c5 01       	movw	r24, r10
     480:	b4 01       	movw	r22, r8
     482:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__divsf3>
     486:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fixunssfsi>
     48a:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <RPM+0x1>
     48e:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <RPM>
		distancia_percorrida_dm += 3.1415*diametro_pneu*sensor_pneu/10;//em dm, porém será apresentado em Km
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	40 e2       	ldi	r20, 0x20	; 32
     498:	51 e4       	ldi	r21, 0x41	; 65
     49a:	c7 01       	movw	r24, r14
     49c:	b6 01       	movw	r22, r12
     49e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__divsf3>
     4a2:	6b 01       	movw	r12, r22
     4a4:	7c 01       	movw	r14, r24
     4a6:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <distancia_percorrida_dm>
     4aa:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <distancia_percorrida_dm+0x1>
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__floatunsisf>
     4b6:	a7 01       	movw	r20, r14
     4b8:	96 01       	movw	r18, r12
     4ba:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__addsf3>
     4be:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fixunssfsi>
     4c2:	70 93 5e 01 	sts	0x015E, r23	; 0x80015e <distancia_percorrida_dm+0x1>
     4c6:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <distancia_percorrida_dm>
		contador_auxiliar = 0;//zera o contador
     4ca:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <contador_auxiliar>
		sensor_pneu =0; //zera contador do sensor
     4ce:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <sensor_pneu+0x1>
     4d2:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <sensor_pneu>
		
		if (distancia_percorrida_dm > 10000)// teste para incrementar distância no hodômetro quando completar 1km
     4d6:	61 31       	cpi	r22, 0x11	; 17
     4d8:	27 e2       	ldi	r18, 0x27	; 39
     4da:	72 07       	cpc	r23, r18
     4dc:	b0 f0       	brcs	.+44     	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
		{
			distancia_percorrida_km ++;
     4de:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <distancia_percorrida_km>
     4e2:	50 91 5c 01 	lds	r21, 0x015C	; 0x80015c <distancia_percorrida_km+0x1>
     4e6:	4f 5f       	subi	r20, 0xFF	; 255
     4e8:	5f 4f       	sbci	r21, 0xFF	; 255
     4ea:	50 93 5c 01 	sts	0x015C, r21	; 0x80015c <distancia_percorrida_km+0x1>
     4ee:	40 93 5b 01 	sts	0x015B, r20	; 0x80015b <distancia_percorrida_km>
			distancia_percorrida_dm -= 10000;
     4f2:	60 51       	subi	r22, 0x10	; 16
     4f4:	77 42       	sbci	r23, 0x27	; 39
     4f6:	70 93 5e 01 	sts	0x015E, r23	; 0x80015e <distancia_percorrida_dm+0x1>
     4fa:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <distancia_percorrida_dm>
			eeprom_write_dword (0, distancia_percorrida_km); //altera valor na memória quando 1km for percorrido
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <eeprom_write_dword>
		}
	}
}
     50a:	ff 91       	pop	r31
     50c:	ef 91       	pop	r30
     50e:	bf 91       	pop	r27
     510:	af 91       	pop	r26
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	7f 91       	pop	r23
     518:	6f 91       	pop	r22
     51a:	5f 91       	pop	r21
     51c:	4f 91       	pop	r20
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	ff 90       	pop	r15
     524:	ef 90       	pop	r14
     526:	df 90       	pop	r13
     528:	cf 90       	pop	r12
     52a:	bf 90       	pop	r11
     52c:	af 90       	pop	r10
     52e:	9f 90       	pop	r9
     530:	8f 90       	pop	r8
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <__vector_10>:
ISR(TIMER1_CAPT_vect)
{
     53c:	1f 92       	push	r1
     53e:	0f 92       	push	r0
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	0f 92       	push	r0
     544:	11 24       	eor	r1, r1
     546:	2f 93       	push	r18
     548:	3f 93       	push	r19
     54a:	4f 93       	push	r20
     54c:	5f 93       	push	r21
     54e:	6f 93       	push	r22
     550:	7f 93       	push	r23
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
     556:	af 93       	push	r26
     558:	bf 93       	push	r27
     55a:	ef 93       	push	r30
     55c:	ff 93       	push	r31
	if(TCCR1B&(1<<ICES1))//testa configuração para borda de subida
     55e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     562:	86 ff       	sbrs	r24, 6
     564:	0f c0       	rjmp	.+30     	; 0x584 <__vector_10+0x48>
		tempo_borda_subida_SR04 = ICR1; //guarda posição do tempo de subida no disparo de PB0
     566:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     56a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     56e:	a0 e0       	ldi	r26, 0x00	; 0
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <tempo_borda_subida_SR04>
     576:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <tempo_borda_subida_SR04+0x1>
     57a:	a0 93 63 01 	sts	0x0163, r26	; 0x800163 <tempo_borda_subida_SR04+0x2>
     57e:	b0 93 64 01 	sts	0x0164, r27	; 0x800164 <tempo_borda_subida_SR04+0x3>
     582:	2a c0       	rjmp	.+84     	; 0x5d8 <__vector_10+0x9c>
	else
		tempo_delta_SR04 = (ICR1 - tempo_borda_subida_SR04)*16; //calcula tempo em nível alto
     584:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     588:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     58c:	a0 e0       	ldi	r26, 0x00	; 0
     58e:	b0 e0       	ldi	r27, 0x00	; 0
     590:	40 91 61 01 	lds	r20, 0x0161	; 0x800161 <tempo_borda_subida_SR04>
     594:	50 91 62 01 	lds	r21, 0x0162	; 0x800162 <tempo_borda_subida_SR04+0x1>
     598:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <tempo_borda_subida_SR04+0x2>
     59c:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <tempo_borda_subida_SR04+0x3>
     5a0:	84 1b       	sub	r24, r20
     5a2:	95 0b       	sbc	r25, r21
     5a4:	a6 0b       	sbc	r26, r22
     5a6:	b7 0b       	sbc	r27, r23
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	aa 1f       	adc	r26, r26
     5ae:	bb 1f       	adc	r27, r27
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	aa 1f       	adc	r26, r26
     5b6:	bb 1f       	adc	r27, r27
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	aa 1f       	adc	r26, r26
     5be:	bb 1f       	adc	r27, r27
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	aa 1f       	adc	r26, r26
     5c6:	bb 1f       	adc	r27, r27
     5c8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <tempo_delta_SR04>
     5cc:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <tempo_delta_SR04+0x1>
     5d0:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <tempo_delta_SR04+0x2>
     5d4:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <tempo_delta_SR04+0x3>
	
	TCCR1B ^=(1<<ICES1);//inverte borda de captura
     5d8:	e1 e8       	ldi	r30, 0x81	; 129
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	90 81       	ld	r25, Z
     5de:	80 e4       	ldi	r24, 0x40	; 64
     5e0:	89 27       	eor	r24, r25
     5e2:	80 83       	st	Z, r24
	distancia_obstaculo = tempo_delta_SR04/58;//converte valor medido de tempo para distancia do obstaculo em cm
     5e4:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <tempo_delta_SR04>
     5e8:	70 91 53 01 	lds	r23, 0x0153	; 0x800153 <tempo_delta_SR04+0x1>
     5ec:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <tempo_delta_SR04+0x2>
     5f0:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <tempo_delta_SR04+0x3>
     5f4:	2a e3       	ldi	r18, 0x3A	; 58
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__udivmodsi4>
     600:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <distancia_obstaculo>
     604:	30 93 66 01 	sts	0x0166, r19	; 0x800166 <distancia_obstaculo+0x1>
     608:	40 93 67 01 	sts	0x0167, r20	; 0x800167 <distancia_obstaculo+0x2>
     60c:	50 93 68 01 	sts	0x0168, r21	; 0x800168 <distancia_obstaculo+0x3>
}
     610:	ff 91       	pop	r31
     612:	ef 91       	pop	r30
     614:	bf 91       	pop	r27
     616:	af 91       	pop	r26
     618:	9f 91       	pop	r25
     61a:	8f 91       	pop	r24
     61c:	7f 91       	pop	r23
     61e:	6f 91       	pop	r22
     620:	5f 91       	pop	r21
     622:	4f 91       	pop	r20
     624:	3f 91       	pop	r19
     626:	2f 91       	pop	r18
     628:	0f 90       	pop	r0
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	0f 90       	pop	r0
     62e:	1f 90       	pop	r1
     630:	18 95       	reti

00000632 <__vector_21>:
		eeprom_write_word(15,ultima_manut);
	}
}

ISR(ADC_vect) //Interrupção do ADC
{
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	2f 93       	push	r18
     63e:	3f 93       	push	r19
     640:	4f 93       	push	r20
     642:	5f 93       	push	r21
     644:	6f 93       	push	r22
     646:	7f 93       	push	r23
     648:	8f 93       	push	r24
     64a:	9f 93       	push	r25
     64c:	af 93       	push	r26
     64e:	bf 93       	push	r27
     650:	ef 93       	push	r30
     652:	ff 93       	push	r31
	switch(contador_AD)
     654:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <contador_AD>
     658:	81 30       	cpi	r24, 0x01	; 1
     65a:	b9 f1       	breq	.+110    	; 0x6ca <__vector_21+0x98>
     65c:	20 f0       	brcs	.+8      	; 0x666 <__vector_21+0x34>
     65e:	82 30       	cpi	r24, 0x02	; 2
     660:	09 f4       	brne	.+2      	; 0x664 <__vector_21+0x32>
     662:	69 c0       	rjmp	.+210    	; 0x736 <__vector_21+0x104>
     664:	ae c0       	rjmp	.+348    	; 0x7c2 <__vector_21+0x190>
	{
		case 0://controle do motor
			ADMUX = 0b00000000; //seleção de PC0 com tensão de referência Aref = 5V
     666:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			if ((PIND&0b10000000)==0)
     66a:	4f 99       	sbic	0x09, 7	; 9
     66c:	02 c0       	rjmp	.+4      	; 0x672 <__vector_21+0x40>
				OCR0B = 0; // zera o PWM se P for desabilitada
     66e:	18 bc       	out	0x28, r1	; 40
     670:	26 c0       	rjmp	.+76     	; 0x6be <__vector_21+0x8c>
			else
			{
				if ((velocidade_veiculo>20)&&(distancia_obstaculo<300)&&(ADC/4>25))//freada brusca apenas se exceder o limite de velocidade ou distancia de obstaculo
     672:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <velocidade_veiculo>
     676:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <velocidade_veiculo+0x1>
     67a:	45 97       	sbiw	r24, 0x15	; 21
     67c:	b8 f0       	brcs	.+46     	; 0x6ac <__vector_21+0x7a>
     67e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <distancia_obstaculo>
     682:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <distancia_obstaculo+0x1>
     686:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <distancia_obstaculo+0x2>
     68a:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <distancia_obstaculo+0x3>
     68e:	8c 32       	cpi	r24, 0x2C	; 44
     690:	91 40       	sbci	r25, 0x01	; 1
     692:	a1 05       	cpc	r26, r1
     694:	b1 05       	cpc	r27, r1
     696:	50 f4       	brcc	.+20     	; 0x6ac <__vector_21+0x7a>
     698:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     69c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     6a0:	88 36       	cpi	r24, 0x68	; 104
     6a2:	91 05       	cpc	r25, r1
     6a4:	18 f0       	brcs	.+6      	; 0x6ac <__vector_21+0x7a>
				{
					OCR0B = 25;//~10% da velocidade máxima
     6a6:	89 e1       	ldi	r24, 0x19	; 25
     6a8:	88 bd       	out	0x28, r24	; 40
     6aa:	09 c0       	rjmp	.+18     	; 0x6be <__vector_21+0x8c>
				}
				else
				{
					OCR0B = ADC/4; //leitura do ADC varia de 0-1023, assim OCR0B varia de 0-255, onde Dpwm = OCR0B/256 (variação de 0 - 100%)
     6ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     6b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     6b4:	96 95       	lsr	r25
     6b6:	87 95       	ror	r24
     6b8:	96 95       	lsr	r25
     6ba:	87 95       	ror	r24
     6bc:	88 bd       	out	0x28, r24	; 40
				}
			}
			contador_AD++;//incremento para percorrer toda a função switch
     6be:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <contador_AD>
     6c2:	8f 5f       	subi	r24, 0xFF	; 255
     6c4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <contador_AD>
		break;
     6c8:	80 c0       	rjmp	.+256    	; 0x7ca <__vector_21+0x198>
			
		case 1://controle da carga da bateria
			ADMUX = 0b00000001; //seleção de PC1 com tensão de referência Aref = 5V
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			if (ADC<665) //ajuste para apresentação correta no display
     6d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     6d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     6d8:	89 39       	cpi	r24, 0x99	; 153
     6da:	92 40       	sbci	r25, 0x02	; 2
     6dc:	90 f4       	brcc	.+36     	; 0x702 <__vector_21+0xd0>
				carga_bateria = (ADC*100)/1024; //carga da bateria em %
     6de:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     6e2:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     6e6:	44 e6       	ldi	r20, 0x64	; 100
     6e8:	42 9f       	mul	r20, r18
     6ea:	c0 01       	movw	r24, r0
     6ec:	43 9f       	mul	r20, r19
     6ee:	90 0d       	add	r25, r0
     6f0:	11 24       	eor	r1, r1
     6f2:	89 2f       	mov	r24, r25
     6f4:	86 95       	lsr	r24
     6f6:	86 95       	lsr	r24
     6f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     6fc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     700:	14 c0       	rjmp	.+40     	; 0x72a <__vector_21+0xf8>
			else
				carga_bateria = (ADC*100)/1024+65; //carga da bateria em %
     702:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     706:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     70a:	44 e6       	ldi	r20, 0x64	; 100
     70c:	42 9f       	mul	r20, r18
     70e:	c0 01       	movw	r24, r0
     710:	43 9f       	mul	r20, r19
     712:	90 0d       	add	r25, r0
     714:	11 24       	eor	r1, r1
     716:	89 2f       	mov	r24, r25
     718:	99 27       	eor	r25, r25
     71a:	86 95       	lsr	r24
     71c:	86 95       	lsr	r24
     71e:	8f 5b       	subi	r24, 0xBF	; 191
     720:	9f 4f       	sbci	r25, 0xFF	; 255
     722:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     726:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			contador_AD++;
     72a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <contador_AD>
     72e:	8f 5f       	subi	r24, 0xFF	; 255
     730:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <contador_AD>
		break;
     734:	4a c0       	rjmp	.+148    	; 0x7ca <__vector_21+0x198>
		
		case 2://controle da temperatura da bateria
			ADMUX = 0b00000011; //seleção de PC3 com tensão de referência Aref = 5V
     736:	83 e0       	ldi	r24, 0x03	; 3
     738:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			temp_bateria = ((ADC*100/(1024-ADC))-100)/0.385; //temperatura da bateria
     73c:	e8 e7       	ldi	r30, 0x78	; 120
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	20 81       	ld	r18, Z
     742:	31 81       	ldd	r19, Z+1	; 0x01
     744:	44 e6       	ldi	r20, 0x64	; 100
     746:	42 9f       	mul	r20, r18
     748:	c0 01       	movw	r24, r0
     74a:	43 9f       	mul	r20, r19
     74c:	90 0d       	add	r25, r0
     74e:	11 24       	eor	r1, r1
     750:	20 81       	ld	r18, Z
     752:	31 81       	ldd	r19, Z+1	; 0x01
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	74 e0       	ldi	r23, 0x04	; 4
     758:	62 1b       	sub	r22, r18
     75a:	73 0b       	sbc	r23, r19
     75c:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__udivmodhi4>
     760:	64 56       	subi	r22, 0x64	; 100
     762:	71 09       	sbc	r23, r1
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__floatunsisf>
     76c:	28 eb       	ldi	r18, 0xB8	; 184
     76e:	3e e1       	ldi	r19, 0x1E	; 30
     770:	45 ec       	ldi	r20, 0xC5	; 197
     772:	5e e3       	ldi	r21, 0x3E	; 62
     774:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__divsf3>
     778:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__fixunssfsi>
     77c:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <temp_bateria+0x1>
     780:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <temp_bateria>
			if(temp_bateria > 200) //ajuste para erro quando sensor marca 0°C
     784:	69 3c       	cpi	r22, 0xC9	; 201
     786:	71 05       	cpc	r23, r1
     788:	20 f0       	brcs	.+8      	; 0x792 <__vector_21+0x160>
				temp_bateria = 0;
     78a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <temp_bateria+0x1>
     78e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <temp_bateria>
			if(temp_bateria>temp_bateria_max)
     792:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <temp_bateria>
     796:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <temp_bateria+0x1>
     79a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <temp_bateria_max>
     79e:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <temp_bateria_max+0x1>
     7a2:	84 17       	cp	r24, r20
     7a4:	95 07       	cpc	r25, r21
     7a6:	50 f4       	brcc	.+20     	; 0x7bc <__vector_21+0x18a>
			{
				temp_bateria_max = temp_bateria;
     7a8:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <temp_bateria_max+0x1>
     7ac:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <temp_bateria_max>
				eeprom_write_dword (10, temp_bateria_max); //altera valor na memória quando nova máxima for detectada
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	8a e0       	ldi	r24, 0x0A	; 10
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <eeprom_write_dword>
			}
			contador_AD = 0;
     7bc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <contador_AD>
		break;
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <__vector_21+0x198>
		
		default:
			ADMUX = 0b00000000; //seleção de PC2 com tensão de referência Aref = 5V
     7c2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			contador_AD=0;
     7c6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <contador_AD>
		break;
	}
	
}
     7ca:	ff 91       	pop	r31
     7cc:	ef 91       	pop	r30
     7ce:	bf 91       	pop	r27
     7d0:	af 91       	pop	r26
     7d2:	9f 91       	pop	r25
     7d4:	8f 91       	pop	r24
     7d6:	7f 91       	pop	r23
     7d8:	6f 91       	pop	r22
     7da:	5f 91       	pop	r21
     7dc:	4f 91       	pop	r20
     7de:	3f 91       	pop	r19
     7e0:	2f 91       	pop	r18
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	0f 90       	pop	r0
     7e8:	1f 90       	pop	r1
     7ea:	18 95       	reti

000007ec <Inicia_UART>:

}

void Inicia_UART(unsigned int ubrr) //função para inicializar a USART
{
	UBRR0H = (unsigned char)(ubrr>>8);//ajusta taxa de transmissão
     7ec:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
     7f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);//Habilita o transmissor e o receptor
     7f4:	88 e9       	ldi	r24, 0x98	; 152
     7f6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<USBS0)|(1<<UCSZ00);//Ajusta o formato do frame: 8bits de dados e 2 de parada
     7fa:	8a e0       	ldi	r24, 0x0A	; 10
     7fc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     800:	08 95       	ret

00000802 <UART_Transmit>:
}

void UART_Transmit(unsigned char data) //função para envio de um frame de 5 a 8bits
{
	while(!( UCSR0A & (1<<UDRE0)));//Espera a limpeza do registr. de transmissão
     802:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     806:	95 ff       	sbrs	r25, 5
     808:	fc cf       	rjmp	.-8      	; 0x802 <UART_Transmit>
	UDR0 = data; //Coloca o dado no registrador e o envia
     80a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     80e:	08 95       	ret

00000810 <__vector_18>:
	TCCR1B ^=(1<<ICES1);//inverte borda de captura
	distancia_obstaculo = tempo_delta_SR04/58;//converte valor medido de tempo para distancia do obstaculo em cm
}

ISR(USART_RX_vect)//interrupção para interação com UART
{
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	2f 93       	push	r18
     820:	3f 93       	push	r19
     822:	4f 93       	push	r20
     824:	5f 93       	push	r21
     826:	6f 93       	push	r22
     828:	7f 93       	push	r23
     82a:	8f 93       	push	r24
     82c:	9f 93       	push	r25
     82e:	af 93       	push	r26
     830:	bf 93       	push	r27
     832:	ef 93       	push	r30
     834:	ff 93       	push	r31
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	28 97       	sbiw	r28, 0x08	; 8
     840:	de bf       	out	0x3e, r29	; 62
     842:	cd bf       	out	0x3d, r28	; 61
	char recebido, string1[8];
	uint8_t i=0;
	recebido = UDR0;
     844:	00 91 c6 00 	lds	r16, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if(recebido == 'd') //retorna temp_max da bateria
     848:	04 36       	cpi	r16, 0x64	; 100
     84a:	31 f5       	brne	.+76     	; 0x898 <__vector_18+0x88>
	{
		sprintf(string1, "%d", temp_bateria_max); 
     84c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <temp_bateria_max+0x1>
     850:	8f 93       	push	r24
     852:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <temp_bateria_max>
     856:	8f 93       	push	r24
     858:	86 e0       	ldi	r24, 0x06	; 6
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	9f 93       	push	r25
     85e:	8f 93       	push	r24
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	9f 93       	push	r25
     866:	8f 93       	push	r24
     868:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <sprintf>
		while(string1[i]!='\0')
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
}

ISR(USART_RX_vect)//interrupção para interação com UART
{
	char recebido, string1[8];
	uint8_t i=0;
     878:	10 e0       	ldi	r17, 0x00	; 0
	recebido = UDR0;
	if(recebido == 'd') //retorna temp_max da bateria
	{
		sprintf(string1, "%d", temp_bateria_max); 
		while(string1[i]!='\0')
     87a:	04 c0       	rjmp	.+8      	; 0x884 <__vector_18+0x74>
		{
			UART_Transmit(string1[i]);
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 01 04 	call	0x802	; 0x802 <UART_Transmit>
			i++;
     882:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t i=0;
	recebido = UDR0;
	if(recebido == 'd') //retorna temp_max da bateria
	{
		sprintf(string1, "%d", temp_bateria_max); 
		while(string1[i]!='\0')
     884:	e1 e0       	ldi	r30, 0x01	; 1
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	ec 0f       	add	r30, r28
     88a:	fd 1f       	adc	r31, r29
     88c:	e1 0f       	add	r30, r17
     88e:	f1 1d       	adc	r31, r1
     890:	80 81       	ld	r24, Z
     892:	81 11       	cpse	r24, r1
     894:	f3 cf       	rjmp	.-26     	; 0x87c <__vector_18+0x6c>
     896:	01 c0       	rjmp	.+2      	; 0x89a <__vector_18+0x8a>
}

ISR(USART_RX_vect)//interrupção para interação com UART
{
	char recebido, string1[8];
	uint8_t i=0;
     898:	10 e0       	ldi	r17, 0x00	; 0
		{
			UART_Transmit(string1[i]);
			i++;
		}
	}
	if(recebido == 'l') //limpa a locação de memória para temp_max
     89a:	0c 36       	cpi	r16, 0x6C	; 108
     89c:	51 f4       	brne	.+20     	; 0x8b2 <__vector_18+0xa2>
	{
		temp_bateria_max = 0;
     89e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <temp_bateria_max+0x1>
     8a2:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <temp_bateria_max>
		eeprom_write_word(10,temp_bateria_max);
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	8a e0       	ldi	r24, 0x0A	; 10
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 72 11 	call	0x22e4	; 0x22e4 <eeprom_write_word>
	}
	if(recebido == 'u') //apresenta última manutenção
     8b2:	05 37       	cpi	r16, 0x75	; 117
     8b4:	21 f5       	brne	.+72     	; 0x8fe <__vector_18+0xee>
	{
		sprintf(string1, "%d", ultima_manut); //gera string para transmissão e processamento
     8b6:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__data_end+0x1>
     8ba:	8f 93       	push	r24
     8bc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
     8c0:	8f 93       	push	r24
     8c2:	86 e0       	ldi	r24, 0x06	; 6
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	9f 93       	push	r25
     8c8:	8f 93       	push	r24
     8ca:	ce 01       	movw	r24, r28
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <sprintf>
		while(string1[i]!='\0')
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	04 c0       	rjmp	.+8      	; 0x8ec <__vector_18+0xdc>
		{
			UART_Transmit(string1[i]);
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 01 04 	call	0x802	; 0x802 <UART_Transmit>
			i++;
     8ea:	1f 5f       	subi	r17, 0xFF	; 255
		eeprom_write_word(10,temp_bateria_max);
	}
	if(recebido == 'u') //apresenta última manutenção
	{
		sprintf(string1, "%d", ultima_manut); //gera string para transmissão e processamento
		while(string1[i]!='\0')
     8ec:	e1 e0       	ldi	r30, 0x01	; 1
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	ec 0f       	add	r30, r28
     8f2:	fd 1f       	adc	r31, r29
     8f4:	e1 0f       	add	r30, r17
     8f6:	f1 1d       	adc	r31, r1
     8f8:	80 81       	ld	r24, Z
     8fa:	81 11       	cpse	r24, r1
     8fc:	f3 cf       	rjmp	.-26     	; 0x8e4 <__vector_18+0xd4>
		{
			UART_Transmit(string1[i]);
			i++;
		}
	}
	if(recebido == 'm') //foi realizada nova manutenção
     8fe:	0d 36       	cpi	r16, 0x6D	; 109
     900:	61 f4       	brne	.+24     	; 0x91a <__stack+0x1b>
	{
		ultima_manut = distancia_percorrida_km;
     902:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <distancia_percorrida_km>
     906:	70 91 5c 01 	lds	r23, 0x015C	; 0x80015c <distancia_percorrida_km+0x1>
     90a:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <__data_end+0x1>
     90e:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <__data_end>
		eeprom_write_word(15,ultima_manut);
     912:	8f e0       	ldi	r24, 0x0F	; 15
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 72 11 	call	0x22e4	; 0x22e4 <eeprom_write_word>
	}
}
     91a:	28 96       	adiw	r28, 0x08	; 8
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	ff 91       	pop	r31
     92c:	ef 91       	pop	r30
     92e:	bf 91       	pop	r27
     930:	af 91       	pop	r26
     932:	9f 91       	pop	r25
     934:	8f 91       	pop	r24
     936:	7f 91       	pop	r23
     938:	6f 91       	pop	r22
     93a:	5f 91       	pop	r21
     93c:	4f 91       	pop	r20
     93e:	3f 91       	pop	r19
     940:	2f 91       	pop	r18
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f 90       	pop	r0
     94c:	1f 90       	pop	r1
     94e:	18 95       	reti

00000950 <Alertas>:
	Alertas(); //verifica se temperatura está aceitável
	GLCD_Render();
}

void Alertas(void) //Emite mensagem sonora e visual se houver problema no veículo
{
     950:	cf 92       	push	r12
     952:	ef 92       	push	r14
     954:	0f 93       	push	r16
	if (temp_bateria > 80)//Printa mensagem de alerta se a temperatura da bateria for maior que 80°C
     956:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_bateria>
     95a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_bateria+0x1>
     95e:	81 35       	cpi	r24, 0x51	; 81
     960:	91 05       	cpc	r25, r1
     962:	c8 f0       	brcs	.+50     	; 0x996 <Alertas+0x46>
	{
		GLCD_DrawTriangle(96, 60, 120, 60, 108, 45, GLCD_Black);
     964:	cc 24       	eor	r12, r12
     966:	ca 94       	dec	r12
     968:	0f 2e       	mov	r0, r31
     96a:	fd e2       	ldi	r31, 0x2D	; 45
     96c:	ef 2e       	mov	r14, r31
     96e:	f0 2d       	mov	r31, r0
     970:	0c e6       	ldi	r16, 0x6C	; 108
     972:	2c e3       	ldi	r18, 0x3C	; 60
     974:	48 e7       	ldi	r20, 0x78	; 120
     976:	6c e3       	ldi	r22, 0x3C	; 60
     978:	80 e6       	ldi	r24, 0x60	; 96
     97a:	0e 94 4e 0a 	call	0x149c	; 0x149c <GLCD_DrawTriangle>
		GLCD_GotoXY(106,50);
     97e:	62 e3       	ldi	r22, 0x32	; 50
     980:	8a e6       	ldi	r24, 0x6A	; 106
     982:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
		GLCD_PrintString("!");
     986:	89 e0       	ldi	r24, 0x09	; 9
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GLCD_PrintString>
		PORTC |= 0b0000100; //ativa alerta sonoro para chamar atenção do motorista
     98e:	88 b1       	in	r24, 0x08	; 8
     990:	84 60       	ori	r24, 0x04	; 4
     992:	88 b9       	out	0x08, r24	; 8
     994:	03 c0       	rjmp	.+6      	; 0x99c <Alertas+0x4c>
	}
	else
		PORTC &= 0b1111011;
     996:	88 b1       	in	r24, 0x08	; 8
     998:	8b 77       	andi	r24, 0x7B	; 123
     99a:	88 b9       	out	0x08, r24	; 8
	
	if (distancia_percorrida_km > ultima_manut+2)//Printa mensagem de alerta se manutenção expirar
     99c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
     9a0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
     9a4:	02 96       	adiw	r24, 0x02	; 2
     9a6:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <distancia_percorrida_km>
     9aa:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <distancia_percorrida_km+0x1>
     9ae:	82 17       	cp	r24, r18
     9b0:	93 07       	cpc	r25, r19
     9b2:	78 f4       	brcc	.+30     	; 0x9d2 <Alertas+0x82>
	{
		GLCD_DrawRectangle(98, 44, 118, 30,GLCD_Black);
     9b4:	0f ef       	ldi	r16, 0xFF	; 255
     9b6:	2e e1       	ldi	r18, 0x1E	; 30
     9b8:	46 e7       	ldi	r20, 0x76	; 118
     9ba:	6c e2       	ldi	r22, 0x2C	; 44
     9bc:	82 e6       	ldi	r24, 0x62	; 98
     9be:	0e 94 f7 09 	call	0x13ee	; 0x13ee <GLCD_DrawRectangle>
		GLCD_GotoXY(106,35);
     9c2:	63 e2       	ldi	r22, 0x23	; 35
     9c4:	8a e6       	ldi	r24, 0x6A	; 106
     9c6:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
		GLCD_PrintString("M");
     9ca:	8b e0       	ldi	r24, 0x0B	; 11
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GLCD_PrintString>
	}
	
		
}
     9d2:	0f 91       	pop	r16
     9d4:	ef 90       	pop	r14
     9d6:	cf 90       	pop	r12
     9d8:	08 95       	ret

000009da <anima_display>:
	UDR0 = data; //Coloca o dado no registrador e o envia
}

void anima_display(void)//código para o display I2C
{
	GLCD_Clear();
     9da:	0e 94 97 0a 	call	0x152e	; 0x152e <GLCD_Clear>
	GLCD_GotoXY(0,0);
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
	GLCD_PrintString("Comp. Bordo");
     9e6:	8d e0       	ldi	r24, 0x0D	; 13
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GLCD_PrintString>
	GLCD_GotoX(90);
     9ee:	8a e5       	ldi	r24, 0x5A	; 90
     9f0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <GLCD_GotoX>
	GLCD_PrintInteger(carga_bateria);
     9f4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     9f8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GLCD_PrintInteger>
	GLCD_PrintString(" %");
     a04:	89 e1       	ldi	r24, 0x19	; 25
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GLCD_PrintString>
	GLCD_GotoXY(0,9);
     a0c:	69 e0       	ldi	r22, 0x09	; 9
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
	GLCD_PrintString("------------");
     a14:	8c e1       	ldi	r24, 0x1C	; 28
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GLCD_PrintString>
	GLCD_GotoX(90);
     a1c:	8a e5       	ldi	r24, 0x5A	; 90
     a1e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <GLCD_GotoX>
	GLCD_PrintInteger(temp_bateria);
     a22:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <temp_bateria>
     a26:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <temp_bateria+0x1>
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GLCD_PrintInteger>
	GLCD_PrintString(" C");
     a32:	89 e2       	ldi	r24, 0x29	; 41
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GLCD_PrintString>
	GLCD_GotoXY(0,16);
     a3a:	60 e1       	ldi	r22, 0x10	; 16
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
	GLCD_PrintString("Diam(cm): ");
     a42:	8c e2       	ldi	r24, 0x2C	; 44
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GLCD_PrintString>
	GLCD_PrintInteger(diametro_pneu);
     a4a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <diametro_pneu>
     a4e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <diametro_pneu+0x1>
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GLCD_PrintInteger>
	GLCD_GotoXY(0,25);
     a5a:	69 e1       	ldi	r22, 0x19	; 25
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
	GLCD_PrintInteger(RPM);
     a62:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <RPM>
     a66:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <RPM+0x1>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GLCD_PrintInteger>
	GLCD_PrintString(" rpm");
     a72:	87 e3       	ldi	r24, 0x37	; 55
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GLCD_PrintString>
	GLCD_GotoXY(0,34);
     a7a:	62 e2       	ldi	r22, 0x22	; 34
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
	GLCD_PrintString("Sonar: ");
     a82:	8c e3       	ldi	r24, 0x3C	; 60
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GLCD_PrintString>
	GLCD_PrintInteger(distancia_obstaculo);
     a8a:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <distancia_obstaculo>
     a8e:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <distancia_obstaculo+0x1>
     a92:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <distancia_obstaculo+0x2>
     a96:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <distancia_obstaculo+0x3>
     a9a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GLCD_PrintInteger>
	GLCD_PrintString(" cm");
     a9e:	84 e4       	ldi	r24, 0x44	; 68
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GLCD_PrintString>
	GLCD_GotoXY(5,48);
     aa6:	60 e3       	ldi	r22, 0x30	; 48
     aa8:	85 e0       	ldi	r24, 0x05	; 5
     aaa:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
	GLCD_PrintChar(Marcha);
     aae:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <Marcha>
     ab2:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GLCD_PrintChar>
	GLCD_GotoX(20);
     ab6:	84 e1       	ldi	r24, 0x14	; 20
     ab8:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <GLCD_GotoX>
	GLCD_PrintInteger(distancia_percorrida_km);
     abc:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <distancia_percorrida_km>
     ac0:	70 91 5c 01 	lds	r23, 0x015C	; 0x80015c <distancia_percorrida_km+0x1>
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GLCD_PrintInteger>
	GLCD_PrintString(" Km");
     acc:	88 e4       	ldi	r24, 0x48	; 72
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GLCD_PrintString>
	Alertas(); //verifica se temperatura está aceitável
     ad4:	0e 94 a8 04 	call	0x950	; 0x950 <Alertas>
	GLCD_Render();
     ad8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GLCD_Render>
     adc:	08 95       	ret

00000ade <Mostrar_velocidade>:
}

void Mostrar_velocidade(void) //Função para mostrar velocidade no display de 7 segmentos
{

	PORTB &=0b00000001; //reseta pinos B de 7 a 1
     ade:	85 b1       	in	r24, 0x05	; 5
     ae0:	81 70       	andi	r24, 0x01	; 1
     ae2:	85 b9       	out	0x05, r24	; 5
	PORTB |=0b01100000; //seta 1 no pino de controle B6 e B7
     ae4:	85 b1       	in	r24, 0x05	; 5
     ae6:	80 66       	ori	r24, 0x60	; 96
     ae8:	85 b9       	out	0x05, r24	; 5
	PORTB |= ((velocidade_veiculo/100)<<1)&0b00011110; //mostra a centena
     aea:	45 b1       	in	r20, 0x05	; 5
     aec:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <velocidade_veiculo>
     af0:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <velocidade_veiculo+0x1>
     af4:	36 95       	lsr	r19
     af6:	27 95       	ror	r18
     af8:	36 95       	lsr	r19
     afa:	27 95       	ror	r18
     afc:	ab e7       	ldi	r26, 0x7B	; 123
     afe:	b4 e1       	ldi	r27, 0x14	; 20
     b00:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__umulhisi3>
     b04:	96 95       	lsr	r25
     b06:	87 95       	ror	r24
     b08:	88 0f       	add	r24, r24
     b0a:	8e 71       	andi	r24, 0x1E	; 30
     b0c:	84 2b       	or	r24, r20
     b0e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b10:	8b e5       	ldi	r24, 0x5B	; 91
     b12:	94 e4       	ldi	r25, 0x44	; 68
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <Mostrar_velocidade+0x36>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <Mostrar_velocidade+0x3c>
     b1a:	00 00       	nop
	_delay_ms(70);

	PORTB &=0b11100001; //reseta pinos 4 a 1 de B
     b1c:	85 b1       	in	r24, 0x05	; 5
     b1e:	81 7e       	andi	r24, 0xE1	; 225
     b20:	85 b9       	out	0x05, r24	; 5
	PORTB ^=0b11000000; //inverte os pinos 7 e 6 de B
     b22:	95 b1       	in	r25, 0x05	; 5
     b24:	80 ec       	ldi	r24, 0xC0	; 192
     b26:	89 27       	eor	r24, r25
     b28:	85 b9       	out	0x05, r24	; 5
	PORTB |= (((velocidade_veiculo/10)%10)<<1)&0b00011110; //mostra a dezena
     b2a:	45 b1       	in	r20, 0x05	; 5
     b2c:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <velocidade_veiculo>
     b30:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <velocidade_veiculo+0x1>
     b34:	ad ec       	ldi	r26, 0xCD	; 205
     b36:	bc ec       	ldi	r27, 0xCC	; 204
     b38:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__umulhisi3>
     b3c:	fc 01       	movw	r30, r24
     b3e:	f6 95       	lsr	r31
     b40:	e7 95       	ror	r30
     b42:	f6 95       	lsr	r31
     b44:	e7 95       	ror	r30
     b46:	f6 95       	lsr	r31
     b48:	e7 95       	ror	r30
     b4a:	9f 01       	movw	r18, r30
     b4c:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__umulhisi3>
     b50:	96 95       	lsr	r25
     b52:	87 95       	ror	r24
     b54:	96 95       	lsr	r25
     b56:	87 95       	ror	r24
     b58:	96 95       	lsr	r25
     b5a:	87 95       	ror	r24
     b5c:	9c 01       	movw	r18, r24
     b5e:	22 0f       	add	r18, r18
     b60:	33 1f       	adc	r19, r19
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	82 0f       	add	r24, r18
     b70:	93 1f       	adc	r25, r19
     b72:	9f 01       	movw	r18, r30
     b74:	28 1b       	sub	r18, r24
     b76:	39 0b       	sbc	r19, r25
     b78:	c9 01       	movw	r24, r18
     b7a:	88 0f       	add	r24, r24
     b7c:	8e 71       	andi	r24, 0x1E	; 30
     b7e:	84 2b       	or	r24, r20
     b80:	85 b9       	out	0x05, r24	; 5
     b82:	8b e5       	ldi	r24, 0x5B	; 91
     b84:	94 e4       	ldi	r25, 0x44	; 68
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <Mostrar_velocidade+0xa8>
     b8a:	00 c0       	rjmp	.+0      	; 0xb8c <Mostrar_velocidade+0xae>
     b8c:	00 00       	nop
	_delay_ms(70);
	
	PORTB &=0b11100001; //reseta pinos 4 a 1 de B
     b8e:	85 b1       	in	r24, 0x05	; 5
     b90:	81 7e       	andi	r24, 0xE1	; 225
     b92:	85 b9       	out	0x05, r24	; 5
	PORTB ^=0b01100000; //inverte os pinos 6 e 5 de B
     b94:	95 b1       	in	r25, 0x05	; 5
     b96:	80 e6       	ldi	r24, 0x60	; 96
     b98:	89 27       	eor	r24, r25
     b9a:	85 b9       	out	0x05, r24	; 5
	PORTB |= (((velocidade_veiculo)%10)<<1)&0b00011110; //mostra a unidade
     b9c:	45 b1       	in	r20, 0x05	; 5
     b9e:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <velocidade_veiculo>
     ba2:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <velocidade_veiculo+0x1>
     ba6:	9f 01       	movw	r18, r30
     ba8:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__umulhisi3>
     bac:	96 95       	lsr	r25
     bae:	87 95       	ror	r24
     bb0:	96 95       	lsr	r25
     bb2:	87 95       	ror	r24
     bb4:	96 95       	lsr	r25
     bb6:	87 95       	ror	r24
     bb8:	9c 01       	movw	r18, r24
     bba:	22 0f       	add	r18, r18
     bbc:	33 1f       	adc	r19, r19
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	82 0f       	add	r24, r18
     bcc:	93 1f       	adc	r25, r19
     bce:	9f 01       	movw	r18, r30
     bd0:	28 1b       	sub	r18, r24
     bd2:	39 0b       	sbc	r19, r25
     bd4:	c9 01       	movw	r24, r18
     bd6:	88 0f       	add	r24, r24
     bd8:	8e 71       	andi	r24, 0x1E	; 30
     bda:	84 2b       	or	r24, r20
     bdc:	85 b9       	out	0x05, r24	; 5
     bde:	8b e5       	ldi	r24, 0x5B	; 91
     be0:	94 e4       	ldi	r25, 0x44	; 68
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	f1 f7       	brne	.-4      	; 0xbe2 <Mostrar_velocidade+0x104>
     be6:	00 c0       	rjmp	.+0      	; 0xbe8 <Mostrar_velocidade+0x10a>
     be8:	00 00       	nop
     bea:	08 95       	ret

00000bec <carregar_dados>:

}

void carregar_dados(void)
{
	if(eeprom_read_dword (0)!=-1)//teste para verificar se algo está escrito na memória alocada
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 5e 11 	call	0x22bc	; 0x22bc <eeprom_read_dword>
     bf4:	6f 3f       	cpi	r22, 0xFF	; 255
     bf6:	2f ef       	ldi	r18, 0xFF	; 255
     bf8:	72 07       	cpc	r23, r18
     bfa:	82 07       	cpc	r24, r18
     bfc:	92 07       	cpc	r25, r18
     bfe:	51 f0       	breq	.+20     	; 0xc14 <carregar_dados+0x28>
	{
		if(distancia_percorrida_km == 0)
     c00:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <distancia_percorrida_km>
     c04:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <distancia_percorrida_km+0x1>
     c08:	23 2b       	or	r18, r19
     c0a:	21 f4       	brne	.+8      	; 0xc14 <carregar_dados+0x28>
		distancia_percorrida_km = eeprom_read_dword (0);//lê valor da distância da memória quando programa iniciar
     c0c:	70 93 5c 01 	sts	0x015C, r23	; 0x80015c <distancia_percorrida_km+0x1>
     c10:	60 93 5b 01 	sts	0x015B, r22	; 0x80015b <distancia_percorrida_km>
	}
	if(eeprom_read_word (5)!=-1)//teste para verificar se algo está escrito na memória alocada
     c14:	85 e0       	ldi	r24, 0x05	; 5
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 64 11 	call	0x22c8	; 0x22c8 <eeprom_read_word>
     c1c:	8f 3f       	cpi	r24, 0xFF	; 255
     c1e:	2f ef       	ldi	r18, 0xFF	; 255
     c20:	92 07       	cpc	r25, r18
     c22:	59 f0       	breq	.+22     	; 0xc3a <carregar_dados+0x4e>
	{
		if (diametro_pneu != eeprom_read_word (5))//substituição do valor apenas quando houver diferença
     c24:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <diametro_pneu>
     c28:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <diametro_pneu+0x1>
     c2c:	82 17       	cp	r24, r18
     c2e:	93 07       	cpc	r25, r19
     c30:	21 f0       	breq	.+8      	; 0xc3a <carregar_dados+0x4e>
			diametro_pneu = eeprom_read_word (5);//lê valor do diâmetro da memória quando programa iniciar
     c32:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <diametro_pneu+0x1>
     c36:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <diametro_pneu>
	}
	if(eeprom_read_word (10)!=-1)//teste para verificar se algo está escrito na memória alocada
     c3a:	8a e0       	ldi	r24, 0x0A	; 10
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <eeprom_read_word>
     c42:	8f 3f       	cpi	r24, 0xFF	; 255
     c44:	2f ef       	ldi	r18, 0xFF	; 255
     c46:	92 07       	cpc	r25, r18
     c48:	59 f0       	breq	.+22     	; 0xc60 <carregar_dados+0x74>
	{
		if (temp_bateria_max != eeprom_read_word (10))//substituição do valor apenas quando houver diferença
     c4a:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <temp_bateria_max>
     c4e:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <temp_bateria_max+0x1>
     c52:	82 17       	cp	r24, r18
     c54:	93 07       	cpc	r25, r19
     c56:	21 f0       	breq	.+8      	; 0xc60 <carregar_dados+0x74>
			temp_bateria_max = eeprom_read_word (10);//lê valor do diâmetro da memória quando programa iniciar
     c58:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <temp_bateria_max+0x1>
     c5c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <temp_bateria_max>
	}
	if(eeprom_read_word (15)!=-1)//teste para verificar se algo está escrito na memória alocada
     c60:	8f e0       	ldi	r24, 0x0F	; 15
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 64 11 	call	0x22c8	; 0x22c8 <eeprom_read_word>
     c68:	8f 3f       	cpi	r24, 0xFF	; 255
     c6a:	2f ef       	ldi	r18, 0xFF	; 255
     c6c:	92 07       	cpc	r25, r18
     c6e:	59 f0       	breq	.+22     	; 0xc86 <carregar_dados+0x9a>
	{
		if (ultima_manut != eeprom_read_word (15))//substituição do valor apenas quando houver diferença
     c70:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
     c74:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
     c78:	82 17       	cp	r24, r18
     c7a:	93 07       	cpc	r25, r19
     c7c:	21 f0       	breq	.+8      	; 0xc86 <carregar_dados+0x9a>
			ultima_manut = eeprom_read_word (15);//lê valor do diâmetro da memória quando programa iniciar
     c7e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
     c82:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
     c86:	08 95       	ret

00000c88 <main>:
void Inicia_UART(unsigned int); //função para inicializar a USART
void UART_Transmit(unsigned char data); //função para envio de um frame de 5 a 8bits

int main(void)
{	
	Inicia_UART(MYUBRR);
     c88:	87 e6       	ldi	r24, 0x67	; 103
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <Inicia_UART>
	GLCD_Setup();//INICIALIZAÇÃO DO DISPLAY I2C
     c90:	0e 94 04 08 	call	0x1008	; 0x1008 <GLCD_Setup>
	GLCD_SetFont(Font5x8,5,8,GLCD_Overwrite);
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	48 e0       	ldi	r20, 0x08	; 8
     c98:	65 e0       	ldi	r22, 0x05	; 5
     c9a:	88 e6       	ldi	r24, 0x68	; 104
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <GLCD_SetFont>
	GLCD_Clear();
     ca2:	0e 94 97 0a 	call	0x152e	; 0x152e <GLCD_Clear>
	GLCD_InvertScreen();
     ca6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <GLCD_InvertScreen>
	GLCD_Render();
     caa:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GLCD_Render>
	
	if ((PIND&0b01000000)==0)//inicialização da variável que guarda a marcha
     cae:	4e 99       	sbic	0x09, 6	; 9
     cb0:	04 c0       	rjmp	.+8      	; 0xcba <main+0x32>
		Marcha = 68;//D em ascii
     cb2:	84 e4       	ldi	r24, 0x44	; 68
     cb4:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <Marcha>
     cb8:	03 c0       	rjmp	.+6      	; 0xcc0 <main+0x38>
	else
		Marcha = 82;//R em ascii
     cba:	82 e5       	ldi	r24, 0x52	; 82
     cbc:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <Marcha>
	if ((PIND&0b10000000)==0)
     cc0:	4f 99       	sbic	0x09, 7	; 9
     cc2:	03 c0       	rjmp	.+6      	; 0xcca <main+0x42>
		Marcha = 80;//P em ascii
     cc4:	80 e5       	ldi	r24, 0x50	; 80
     cc6:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <Marcha>
	
    DDRB = 0b11111110;//todos os pinos de B configurados como saídas, exceto PB0
     cca:	8e ef       	ldi	r24, 0xFE	; 254
     ccc:	84 b9       	out	0x04, r24	; 4
    DDRD = 0b00000000;//pinos de D configurados como entrada
     cce:	1a b8       	out	0x0a, r1	; 10
    PORTD |= 0b00011100;//habilitação dos botões de pull-up 3 e 4 em D, 2 recebe os dados do tacômetro
     cd0:	8b b1       	in	r24, 0x0b	; 11
     cd2:	8c 61       	ori	r24, 0x1C	; 28
     cd4:	8b b9       	out	0x0b, r24	; 11
	DDRC |=0b0000100;//habilita PC2 como saída
     cd6:	87 b1       	in	r24, 0x07	; 7
     cd8:	84 60       	ori	r24, 0x04	; 4
     cda:	87 b9       	out	0x07, r24	; 7

	TCCR2A = 0b00000010; //habilita modo CTC do TC2
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0b00000101; //liga TC2, prescaler = 64
     ce2:	95 e0       	ldi	r25, 0x05	; 5
     ce4:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 249; //ajusta o comparador para o TC2 contar até 249
     ce8:	29 ef       	ldi	r18, 0xF9	; 249
     cea:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 = 0b00000010; //habilita a interrupção na igualdade de comparação com OCR2A. A interrupção ocorre a cada 1ms = (64*(249+1))/16MHz
     cee:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	TCCR1B = (1<<ICES1)|(1<<CS12);//Captura na borda de subida, TC1 com prescaler = 256. Estouro a cada 256*(2^16)/16MHz = (2^16)*16us = 1,04s
     cf2:	24 e4       	ldi	r18, 0x44	; 68
     cf4:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = 1<<ICIE1; //habilita a interrupção por captura
     cf8:	20 e2       	ldi	r18, 0x20	; 32
     cfa:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	TCCR0A = 0b10100011;//habilita modo PWM rápido do TC0
     cfe:	23 ea       	ldi	r18, 0xA3	; 163
     d00:	24 bd       	out	0x24, r18	; 36
	TCCR0B = 0b00000101; //liga TC0, prescaler = 1024, fpwm = 16M/(256*1024) = 61Hz
     d02:	95 bd       	out	0x25, r25	; 37
	OCR0B = 0; //controle do Ton do duty cycle (Duty Cycle = OCR0B/256) e o valor inicial é 0
     d04:	18 bc       	out	0x28, r1	; 40
	
	ADMUX = 0b00000000; //tensão de referência no pino C0 é Aref = 5V;
     d06:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = 0b11101111; //habilita o AD, habilita interrupção, modo de conversão contínua, prescaler = 128
     d0a:	9f ee       	ldi	r25, 0xEF	; 239
     d0c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0x00;//modo de conversão contínua
     d10:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = 0b00110100;//habilita pino PC0, PC1 e PC3 como entrada do ADC0
     d14:	94 e3       	ldi	r25, 0x34	; 52
     d16:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	
	PCICR |= (1 << PCIE2); //habilitar interrupção PCINT2 na porta D
     d1a:	e8 e6       	ldi	r30, 0x68	; 104
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	90 81       	ld	r25, Z
     d20:	94 60       	ori	r25, 0x04	; 4
     d22:	90 83       	st	Z, r25
	PCMSK2 |= (1 << PCINT19);//habilitar interrupção PCINT20 correspondente ao pino D3
     d24:	ed e6       	ldi	r30, 0x6D	; 109
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	90 81       	ld	r25, Z
     d2a:	98 60       	ori	r25, 0x08	; 8
     d2c:	90 83       	st	Z, r25
	PCMSK2 |= (1 << PCINT20);//habilitar interrupção PCINT21 correspondente ao pino D4
     d2e:	90 81       	ld	r25, Z
     d30:	90 61       	ori	r25, 0x10	; 16
     d32:	90 83       	st	Z, r25
	PCMSK2 |= (1 << PCINT22);//habilitar interrupção PCINT22 correspondente ao pino D6
     d34:	90 81       	ld	r25, Z
     d36:	90 64       	ori	r25, 0x40	; 64
     d38:	90 83       	st	Z, r25
	PCMSK2 |= (1 << PCINT23);//habilitar interrupção PCINT23 correspondente ao pino D7
     d3a:	90 81       	ld	r25, Z
     d3c:	90 68       	ori	r25, 0x80	; 128
     d3e:	90 83       	st	Z, r25
	
	EICRA = 0b00000010;//INT0 configurada para interrupção na descida do sensor do pneu
     d40:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0b00000001;//habilitar interrupção externa INT0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8d bb       	out	0x1d, r24	; 29
	sei();//Habilitar interrupções globais
     d48:	78 94       	sei
    
    while (1)
    {
		carregar_dados(); //carrega dados do tacometro e hodometro
     d4a:	0e 94 f6 05 	call	0xbec	; 0xbec <carregar_dados>
		Mostrar_velocidade();//ativa display de velocidade
     d4e:	0e 94 6f 05 	call	0xade	; 0xade <Mostrar_velocidade>
		anima_display();//ativa display I2C
     d52:	0e 94 ed 04 	call	0x9da	; 0x9da <anima_display>
     d56:	f9 cf       	rjmp	.-14     	; 0xd4a <main+0xc2>

00000d58 <GLCD_BufferWrite>:
			break;

		GLCD_PrintChar(r);
		r = pgm_read_byte(Text++);
	}
}
     d58:	66 95       	lsr	r22
     d5a:	66 95       	lsr	r22
     d5c:	66 95       	lsr	r22
     d5e:	e8 2f       	mov	r30, r24
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 e8       	ldi	r24, 0x80	; 128
     d64:	68 9f       	mul	r22, r24
     d66:	e0 0d       	add	r30, r0
     d68:	f1 1d       	adc	r31, r1
     d6a:	11 24       	eor	r1, r1
     d6c:	ee 58       	subi	r30, 0x8E	; 142
     d6e:	fe 4f       	sbci	r31, 0xFE	; 254
     d70:	40 83       	st	Z, r20
     d72:	08 95       	ret

00000d74 <GLCD_BufferRead>:
     d74:	66 95       	lsr	r22
     d76:	66 95       	lsr	r22
     d78:	66 95       	lsr	r22
     d7a:	e8 2f       	mov	r30, r24
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 e8       	ldi	r24, 0x80	; 128
     d80:	68 9f       	mul	r22, r24
     d82:	e0 0d       	add	r30, r0
     d84:	f1 1d       	adc	r31, r1
     d86:	11 24       	eor	r1, r1
     d88:	ee 58       	subi	r30, 0x8E	; 142
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	80 81       	ld	r24, Z
     d8e:	08 95       	ret

00000d90 <Int2bcd>:
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	fa 01       	movw	r30, r20
     d9a:	20 e3       	ldi	r18, 0x30	; 48
     d9c:	22 87       	std	Z+10, r18	; 0x0a
     d9e:	21 87       	std	Z+9, r18	; 0x09
     da0:	20 87       	std	Z+8, r18	; 0x08
     da2:	27 83       	std	Z+7, r18	; 0x07
     da4:	26 83       	std	Z+6, r18	; 0x06
     da6:	25 83       	std	Z+5, r18	; 0x05
     da8:	24 83       	std	Z+4, r18	; 0x04
     daa:	23 83       	std	Z+3, r18	; 0x03
     dac:	22 83       	std	Z+2, r18	; 0x02
     dae:	21 83       	std	Z+1, r18	; 0x01
     db0:	20 83       	st	Z, r18
     db2:	bb 23       	and	r27, r27
     db4:	4c f4       	brge	.+18     	; 0xdc8 <Int2bcd+0x38>
     db6:	b0 95       	com	r27
     db8:	a0 95       	com	r26
     dba:	90 95       	com	r25
     dbc:	81 95       	neg	r24
     dbe:	9f 4f       	sbci	r25, 0xFF	; 255
     dc0:	af 4f       	sbci	r26, 0xFF	; 255
     dc2:	bf 4f       	sbci	r27, 0xFF	; 255
     dc4:	31 e0       	ldi	r19, 0x01	; 1
     dc6:	08 c0       	rjmp	.+16     	; 0xdd8 <Int2bcd+0x48>
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	06 c0       	rjmp	.+12     	; 0xdd8 <Int2bcd+0x48>
     dcc:	9a 5c       	subi	r25, 0xCA	; 202
     dce:	aa 49       	sbci	r26, 0x9A	; 154
     dd0:	bb 43       	sbci	r27, 0x3B	; 59
     dd2:	21 81       	ldd	r18, Z+1	; 0x01
     dd4:	2f 5f       	subi	r18, 0xFF	; 255
     dd6:	21 83       	std	Z+1, r18	; 0x01
     dd8:	81 15       	cp	r24, r1
     dda:	2a ec       	ldi	r18, 0xCA	; 202
     ddc:	92 07       	cpc	r25, r18
     dde:	2a e9       	ldi	r18, 0x9A	; 154
     de0:	a2 07       	cpc	r26, r18
     de2:	2b e3       	ldi	r18, 0x3B	; 59
     de4:	b2 07       	cpc	r27, r18
     de6:	94 f7       	brge	.-28     	; 0xdcc <Int2bcd+0x3c>
     de8:	06 c0       	rjmp	.+12     	; 0xdf6 <Int2bcd+0x66>
     dea:	91 5e       	subi	r25, 0xE1	; 225
     dec:	a5 4f       	sbci	r26, 0xF5	; 245
     dee:	b5 40       	sbci	r27, 0x05	; 5
     df0:	22 81       	ldd	r18, Z+2	; 0x02
     df2:	2f 5f       	subi	r18, 0xFF	; 255
     df4:	22 83       	std	Z+2, r18	; 0x02
     df6:	81 15       	cp	r24, r1
     df8:	21 ee       	ldi	r18, 0xE1	; 225
     dfa:	92 07       	cpc	r25, r18
     dfc:	25 ef       	ldi	r18, 0xF5	; 245
     dfe:	a2 07       	cpc	r26, r18
     e00:	25 e0       	ldi	r18, 0x05	; 5
     e02:	b2 07       	cpc	r27, r18
     e04:	94 f7       	brge	.-28     	; 0xdea <Int2bcd+0x5a>
     e06:	07 c0       	rjmp	.+14     	; 0xe16 <Int2bcd+0x86>
     e08:	80 58       	subi	r24, 0x80	; 128
     e0a:	96 49       	sbci	r25, 0x96	; 150
     e0c:	a8 49       	sbci	r26, 0x98	; 152
     e0e:	b1 09       	sbc	r27, r1
     e10:	23 81       	ldd	r18, Z+3	; 0x03
     e12:	2f 5f       	subi	r18, 0xFF	; 255
     e14:	23 83       	std	Z+3, r18	; 0x03
     e16:	80 38       	cpi	r24, 0x80	; 128
     e18:	26 e9       	ldi	r18, 0x96	; 150
     e1a:	92 07       	cpc	r25, r18
     e1c:	28 e9       	ldi	r18, 0x98	; 152
     e1e:	a2 07       	cpc	r26, r18
     e20:	b1 05       	cpc	r27, r1
     e22:	94 f7       	brge	.-28     	; 0xe08 <Int2bcd+0x78>
     e24:	07 c0       	rjmp	.+14     	; 0xe34 <Int2bcd+0xa4>
     e26:	80 54       	subi	r24, 0x40	; 64
     e28:	92 44       	sbci	r25, 0x42	; 66
     e2a:	af 40       	sbci	r26, 0x0F	; 15
     e2c:	b1 09       	sbc	r27, r1
     e2e:	24 81       	ldd	r18, Z+4	; 0x04
     e30:	2f 5f       	subi	r18, 0xFF	; 255
     e32:	24 83       	std	Z+4, r18	; 0x04
     e34:	80 34       	cpi	r24, 0x40	; 64
     e36:	22 e4       	ldi	r18, 0x42	; 66
     e38:	92 07       	cpc	r25, r18
     e3a:	2f e0       	ldi	r18, 0x0F	; 15
     e3c:	a2 07       	cpc	r26, r18
     e3e:	b1 05       	cpc	r27, r1
     e40:	94 f7       	brge	.-28     	; 0xe26 <Int2bcd+0x96>
     e42:	07 c0       	rjmp	.+14     	; 0xe52 <Int2bcd+0xc2>
     e44:	80 5a       	subi	r24, 0xA0	; 160
     e46:	96 48       	sbci	r25, 0x86	; 134
     e48:	a1 40       	sbci	r26, 0x01	; 1
     e4a:	b1 09       	sbc	r27, r1
     e4c:	25 81       	ldd	r18, Z+5	; 0x05
     e4e:	2f 5f       	subi	r18, 0xFF	; 255
     e50:	25 83       	std	Z+5, r18	; 0x05
     e52:	80 3a       	cpi	r24, 0xA0	; 160
     e54:	26 e8       	ldi	r18, 0x86	; 134
     e56:	92 07       	cpc	r25, r18
     e58:	21 e0       	ldi	r18, 0x01	; 1
     e5a:	a2 07       	cpc	r26, r18
     e5c:	b1 05       	cpc	r27, r1
     e5e:	94 f7       	brge	.-28     	; 0xe44 <Int2bcd+0xb4>
     e60:	07 c0       	rjmp	.+14     	; 0xe70 <Int2bcd+0xe0>
     e62:	80 51       	subi	r24, 0x10	; 16
     e64:	97 42       	sbci	r25, 0x27	; 39
     e66:	a1 09       	sbc	r26, r1
     e68:	b1 09       	sbc	r27, r1
     e6a:	26 81       	ldd	r18, Z+6	; 0x06
     e6c:	2f 5f       	subi	r18, 0xFF	; 255
     e6e:	26 83       	std	Z+6, r18	; 0x06
     e70:	80 31       	cpi	r24, 0x10	; 16
     e72:	27 e2       	ldi	r18, 0x27	; 39
     e74:	92 07       	cpc	r25, r18
     e76:	a1 05       	cpc	r26, r1
     e78:	b1 05       	cpc	r27, r1
     e7a:	9c f7       	brge	.-26     	; 0xe62 <Int2bcd+0xd2>
     e7c:	07 c0       	rjmp	.+14     	; 0xe8c <Int2bcd+0xfc>
     e7e:	88 5e       	subi	r24, 0xE8	; 232
     e80:	93 40       	sbci	r25, 0x03	; 3
     e82:	a1 09       	sbc	r26, r1
     e84:	b1 09       	sbc	r27, r1
     e86:	27 81       	ldd	r18, Z+7	; 0x07
     e88:	2f 5f       	subi	r18, 0xFF	; 255
     e8a:	27 83       	std	Z+7, r18	; 0x07
     e8c:	88 3e       	cpi	r24, 0xE8	; 232
     e8e:	23 e0       	ldi	r18, 0x03	; 3
     e90:	92 07       	cpc	r25, r18
     e92:	a1 05       	cpc	r26, r1
     e94:	b1 05       	cpc	r27, r1
     e96:	9c f7       	brge	.-26     	; 0xe7e <Int2bcd+0xee>
     e98:	07 c0       	rjmp	.+14     	; 0xea8 <Int2bcd+0x118>
     e9a:	84 56       	subi	r24, 0x64	; 100
     e9c:	91 09       	sbc	r25, r1
     e9e:	a1 09       	sbc	r26, r1
     ea0:	b1 09       	sbc	r27, r1
     ea2:	20 85       	ldd	r18, Z+8	; 0x08
     ea4:	2f 5f       	subi	r18, 0xFF	; 255
     ea6:	20 87       	std	Z+8, r18	; 0x08
     ea8:	84 36       	cpi	r24, 0x64	; 100
     eaa:	91 05       	cpc	r25, r1
     eac:	a1 05       	cpc	r26, r1
     eae:	b1 05       	cpc	r27, r1
     eb0:	a4 f7       	brge	.-24     	; 0xe9a <Int2bcd+0x10a>
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <Int2bcd+0x130>
     eb4:	0a 97       	sbiw	r24, 0x0a	; 10
     eb6:	a1 09       	sbc	r26, r1
     eb8:	b1 09       	sbc	r27, r1
     eba:	21 85       	ldd	r18, Z+9	; 0x09
     ebc:	2f 5f       	subi	r18, 0xFF	; 255
     ebe:	21 87       	std	Z+9, r18	; 0x09
     ec0:	8a 30       	cpi	r24, 0x0A	; 10
     ec2:	91 05       	cpc	r25, r1
     ec4:	a1 05       	cpc	r26, r1
     ec6:	b1 05       	cpc	r27, r1
     ec8:	ac f7       	brge	.-22     	; 0xeb4 <Int2bcd+0x124>
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <Int2bcd+0x148>
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	a1 09       	sbc	r26, r1
     ed0:	b1 09       	sbc	r27, r1
     ed2:	22 85       	ldd	r18, Z+10	; 0x0a
     ed4:	2f 5f       	subi	r18, 0xFF	; 255
     ed6:	22 87       	std	Z+10, r18	; 0x0a
     ed8:	18 16       	cp	r1, r24
     eda:	19 06       	cpc	r1, r25
     edc:	1a 06       	cpc	r1, r26
     ede:	1b 06       	cpc	r1, r27
     ee0:	ac f3       	brlt	.-22     	; 0xecc <Int2bcd+0x13c>
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <Int2bcd+0x158>
     ee6:	2f 5f       	subi	r18, 0xFF	; 255
     ee8:	df 01       	movw	r26, r30
     eea:	a2 0f       	add	r26, r18
     eec:	b1 1d       	adc	r27, r1
     eee:	8c 91       	ld	r24, X
     ef0:	80 33       	cpi	r24, 0x30	; 48
     ef2:	c9 f3       	breq	.-14     	; 0xee6 <Int2bcd+0x156>
     ef4:	33 23       	and	r19, r19
     ef6:	31 f0       	breq	.+12     	; 0xf04 <Int2bcd+0x174>
     ef8:	21 50       	subi	r18, 0x01	; 1
     efa:	df 01       	movw	r26, r30
     efc:	a2 0f       	add	r26, r18
     efe:	b1 1d       	adc	r27, r1
     f00:	8d e2       	ldi	r24, 0x2D	; 45
     f02:	8c 93       	st	X, r24
     f04:	4a e0       	ldi	r20, 0x0A	; 10
     f06:	42 1b       	sub	r20, r18
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	0d c0       	rjmp	.+26     	; 0xf26 <Int2bcd+0x196>
     f0c:	83 2f       	mov	r24, r19
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	ef 01       	movw	r28, r30
     f12:	c8 0f       	add	r28, r24
     f14:	d9 1f       	adc	r29, r25
     f16:	82 0f       	add	r24, r18
     f18:	91 1d       	adc	r25, r1
     f1a:	df 01       	movw	r26, r30
     f1c:	a8 0f       	add	r26, r24
     f1e:	b9 1f       	adc	r27, r25
     f20:	8c 91       	ld	r24, X
     f22:	88 83       	st	Y, r24
     f24:	3f 5f       	subi	r19, 0xFF	; 255
     f26:	43 17       	cp	r20, r19
     f28:	88 f7       	brcc	.-30     	; 0xf0c <Int2bcd+0x17c>
     f2a:	e3 0f       	add	r30, r19
     f2c:	f1 1d       	adc	r31, r1
     f2e:	10 82       	st	Z, r1
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <GLCD_Send>:
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	c8 2f       	mov	r28, r24
     f40:	8b 01       	movw	r16, r22
     f42:	d4 2f       	mov	r29, r20
     f44:	0e 94 3f 0c 	call	0x187e	; 0x187e <TWI_BeginTransmission>
     f48:	88 e7       	ldi	r24, 0x78	; 120
     f4a:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <TWI_Transmit>
     f4e:	8c 2f       	mov	r24, r28
     f50:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <TWI_Transmit>
     f54:	c0 e0       	ldi	r28, 0x00	; 0
     f56:	07 c0       	rjmp	.+14     	; 0xf66 <GLCD_Send+0x30>
     f58:	f8 01       	movw	r30, r16
     f5a:	ec 0f       	add	r30, r28
     f5c:	f1 1d       	adc	r31, r1
     f5e:	80 81       	ld	r24, Z
     f60:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <TWI_Transmit>
     f64:	cf 5f       	subi	r28, 0xFF	; 255
     f66:	cd 17       	cp	r28, r29
     f68:	b8 f3       	brcs	.-18     	; 0xf58 <GLCD_Send+0x22>
     f6a:	0e 94 49 0c 	call	0x1892	; 0x1892 <TWI_EndTransmission>
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	08 95       	ret

00000f78 <GLCD_SendCommand>:
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	1f 92       	push	r1
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	be 01       	movw	r22, r28
     f88:	6f 5f       	subi	r22, 0xFF	; 255
     f8a:	7f 4f       	sbci	r23, 0xFF	; 255
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	0e 94 9b 07 	call	0xf36	; 0xf36 <GLCD_Send>
     f92:	0f 90       	pop	r0
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <GLCD_Render>:
     f9a:	cf 93       	push	r28
     f9c:	81 e2       	ldi	r24, 0x21	; 33
     f9e:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
     fa8:	8f e7       	ldi	r24, 0x7F	; 127
     faa:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
     fae:	82 e2       	ldi	r24, 0x22	; 34
     fb0:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
     fba:	87 e0       	ldi	r24, 0x07	; 7
     fbc:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
     fc0:	c0 e0       	ldi	r28, 0x00	; 0
     fc2:	0b c0       	rjmp	.+22     	; 0xfda <GLCD_Render+0x40>
     fc4:	80 e1       	ldi	r24, 0x10	; 16
     fc6:	c8 9f       	mul	r28, r24
     fc8:	b0 01       	movw	r22, r0
     fca:	11 24       	eor	r1, r1
     fcc:	6e 58       	subi	r22, 0x8E	; 142
     fce:	7e 4f       	sbci	r23, 0xFE	; 254
     fd0:	40 e1       	ldi	r20, 0x10	; 16
     fd2:	80 e4       	ldi	r24, 0x40	; 64
     fd4:	0e 94 9b 07 	call	0xf36	; 0xf36 <GLCD_Send>
     fd8:	cf 5f       	subi	r28, 0xFF	; 255
     fda:	c0 34       	cpi	r28, 0x40	; 64
     fdc:	98 f3       	brcs	.-26     	; 0xfc4 <GLCD_Render+0x2a>
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <GLCD_GotoX>:
     fe2:	88 23       	and	r24, r24
     fe4:	14 f0       	brlt	.+4      	; 0xfea <GLCD_GotoX+0x8>
     fe6:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <__GLCD>
     fea:	08 95       	ret

00000fec <GLCD_GotoY>:
     fec:	80 34       	cpi	r24, 0x40	; 64
     fee:	10 f4       	brcc	.+4      	; 0xff4 <GLCD_GotoY+0x8>
     ff0:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__GLCD+0x1>
     ff4:	08 95       	ret

00000ff6 <GLCD_GotoXY>:
     ff6:	cf 93       	push	r28
     ff8:	c6 2f       	mov	r28, r22
     ffa:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <GLCD_GotoX>
     ffe:	8c 2f       	mov	r24, r28
    1000:	0e 94 f6 07 	call	0xfec	; 0xfec <GLCD_GotoY>
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <GLCD_Setup>:
    1008:	0e 94 26 0c 	call	0x184c	; 0x184c <TWI_Setup>
    100c:	8e ea       	ldi	r24, 0xAE	; 174
    100e:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1012:	85 ed       	ldi	r24, 0xD5	; 213
    1014:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1018:	80 ef       	ldi	r24, 0xF0	; 240
    101a:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    101e:	88 ea       	ldi	r24, 0xA8	; 168
    1020:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1024:	8f e3       	ldi	r24, 0x3F	; 63
    1026:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    102a:	83 ed       	ldi	r24, 0xD3	; 211
    102c:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1036:	8d e8       	ldi	r24, 0x8D	; 141
    1038:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    103c:	84 e1       	ldi	r24, 0x14	; 20
    103e:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1042:	80 e4       	ldi	r24, 0x40	; 64
    1044:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1048:	80 e2       	ldi	r24, 0x20	; 32
    104a:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1054:	81 ea       	ldi	r24, 0xA1	; 161
    1056:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    105a:	88 ec       	ldi	r24, 0xC8	; 200
    105c:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1060:	8a ed       	ldi	r24, 0xDA	; 218
    1062:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1066:	82 e1       	ldi	r24, 0x12	; 18
    1068:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    106c:	81 e8       	ldi	r24, 0x81	; 129
    106e:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1072:	8f ef       	ldi	r24, 0xFF	; 255
    1074:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1078:	89 ed       	ldi	r24, 0xD9	; 217
    107a:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    107e:	81 ef       	ldi	r24, 0xF1	; 241
    1080:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1084:	8b ed       	ldi	r24, 0xDB	; 219
    1086:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    108a:	80 e2       	ldi	r24, 0x20	; 32
    108c:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1090:	84 ea       	ldi	r24, 0xA4	; 164
    1092:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1096:	86 ea       	ldi	r24, 0xA6	; 166
    1098:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    109c:	8e e2       	ldi	r24, 0x2E	; 46
    109e:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    10a2:	8f ea       	ldi	r24, 0xAF	; 175
    10a4:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
    10b0:	e9 e6       	ldi	r30, 0x69	; 105
    10b2:	f1 e0       	ldi	r31, 0x01	; 1
    10b4:	86 ea       	ldi	r24, 0xA6	; 166
    10b6:	82 83       	std	Z+2, r24	; 0x02
    10b8:	17 82       	std	Z+7, r1	; 0x07
    10ba:	16 82       	std	Z+6, r1	; 0x06
    10bc:	15 82       	std	Z+5, r1	; 0x05
    10be:	11 82       	std	Z+1, r1	; 0x01
    10c0:	10 82       	st	Z, r1
    10c2:	08 95       	ret

000010c4 <GLCD_SetPixel>:
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	c6 2f       	mov	r28, r22
    10d0:	14 2f       	mov	r17, r20
    10d2:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
    10d6:	e9 e6       	ldi	r30, 0x69	; 105
    10d8:	f1 e0       	ldi	r31, 0x01	; 1
    10da:	f1 80       	ldd	r15, Z+1	; 0x01
    10dc:	d0 81       	ld	r29, Z
    10de:	6f 2d       	mov	r22, r15
    10e0:	8d 2f       	mov	r24, r29
    10e2:	0e 94 ba 06 	call	0xd74	; 0xd74 <GLCD_BufferRead>
    10e6:	1f 3f       	cpi	r17, 0xFF	; 255
    10e8:	79 f4       	brne	.+30     	; 0x1108 <GLCD_SetPixel+0x44>
    10ea:	c7 70       	andi	r28, 0x07	; 7
    10ec:	01 e0       	ldi	r16, 0x01	; 1
    10ee:	10 e0       	ldi	r17, 0x00	; 0
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	04 c0       	rjmp	.+8      	; 0x10fe <GLCD_SetPixel+0x3a>
    10f6:	00 0f       	add	r16, r16
    10f8:	11 1f       	adc	r17, r17
    10fa:	22 1f       	adc	r18, r18
    10fc:	33 1f       	adc	r19, r19
    10fe:	ca 95       	dec	r28
    1100:	d2 f7       	brpl	.-12     	; 0x10f6 <GLCD_SetPixel+0x32>
    1102:	48 2f       	mov	r20, r24
    1104:	40 2b       	or	r20, r16
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <GLCD_SetPixel+0x62>
    1108:	c7 70       	andi	r28, 0x07	; 7
    110a:	01 e0       	ldi	r16, 0x01	; 1
    110c:	10 e0       	ldi	r17, 0x00	; 0
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	04 c0       	rjmp	.+8      	; 0x111c <GLCD_SetPixel+0x58>
    1114:	00 0f       	add	r16, r16
    1116:	11 1f       	adc	r17, r17
    1118:	22 1f       	adc	r18, r18
    111a:	33 1f       	adc	r19, r19
    111c:	ca 95       	dec	r28
    111e:	d2 f7       	brpl	.-12     	; 0x1114 <GLCD_SetPixel+0x50>
    1120:	00 95       	com	r16
    1122:	40 2f       	mov	r20, r16
    1124:	48 23       	and	r20, r24
    1126:	6f 2d       	mov	r22, r15
    1128:	8d 2f       	mov	r24, r29
    112a:	0e 94 ac 06 	call	0xd58	; 0xd58 <GLCD_BufferWrite>
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	ff 90       	pop	r15
    1138:	08 95       	ret

0000113a <GLCD_SetPixels>:
    113a:	6f 92       	push	r6
    113c:	7f 92       	push	r7
    113e:	8f 92       	push	r8
    1140:	9f 92       	push	r9
    1142:	af 92       	push	r10
    1144:	bf 92       	push	r11
    1146:	cf 92       	push	r12
    1148:	df 92       	push	r13
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	88 23       	and	r24, r24
    1158:	0c f4       	brge	.+2      	; 0x115c <GLCD_SetPixels+0x22>
    115a:	a7 c0       	rjmp	.+334    	; 0x12aa <GLCD_SetPixels+0x170>
    115c:	44 23       	and	r20, r20
    115e:	0c f4       	brge	.+2      	; 0x1162 <GLCD_SetPixels+0x28>
    1160:	a4 c0       	rjmp	.+328    	; 0x12aa <GLCD_SetPixels+0x170>
    1162:	60 34       	cpi	r22, 0x40	; 64
    1164:	08 f0       	brcs	.+2      	; 0x1168 <GLCD_SetPixels+0x2e>
    1166:	a1 c0       	rjmp	.+322    	; 0x12aa <GLCD_SetPixels+0x170>
    1168:	20 34       	cpi	r18, 0x40	; 64
    116a:	08 f0       	brcs	.+2      	; 0x116e <GLCD_SetPixels+0x34>
    116c:	9e c0       	rjmp	.+316    	; 0x12aa <GLCD_SetPixels+0x170>
    116e:	26 1b       	sub	r18, r22
    1170:	99 24       	eor	r9, r9
    1172:	93 94       	inc	r9
    1174:	92 0e       	add	r9, r18
    1176:	48 1b       	sub	r20, r24
    1178:	d1 e0       	ldi	r29, 0x01	; 1
    117a:	d4 0f       	add	r29, r20
    117c:	96 2f       	mov	r25, r22
    117e:	97 70       	andi	r25, 0x07	; 7
    1180:	16 2f       	mov	r17, r22
    1182:	19 1b       	sub	r17, r25
    1184:	e9 2c       	mov	r14, r9
    1186:	f1 2c       	mov	r15, r1
    1188:	28 e0       	ldi	r18, 0x08	; 8
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	29 1b       	sub	r18, r25
    118e:	31 09       	sbc	r19, r1
    1190:	e2 16       	cp	r14, r18
    1192:	f3 06       	cpc	r15, r19
    1194:	7c f4       	brge	.+30     	; 0x11b4 <GLCD_SetPixels+0x7a>
    1196:	28 e0       	ldi	r18, 0x08	; 8
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	2e 19       	sub	r18, r14
    119c:	3f 09       	sbc	r19, r15
    119e:	4f ef       	ldi	r20, 0xFF	; 255
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	6a 01       	movw	r12, r20
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <GLCD_SetPixels+0x70>
    11a6:	d5 94       	asr	r13
    11a8:	c7 94       	ror	r12
    11aa:	2a 95       	dec	r18
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <GLCD_SetPixels+0x6c>
    11ae:	2c 2d       	mov	r18, r12
    11b0:	b9 2c       	mov	r11, r9
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <GLCD_SetPixels+0x82>
    11b4:	28 e0       	ldi	r18, 0x08	; 8
    11b6:	b2 2e       	mov	r11, r18
    11b8:	b9 1a       	sub	r11, r25
    11ba:	2f ef       	ldi	r18, 0xFF	; 255
    11bc:	a8 2e       	mov	r10, r24
    11be:	c2 2e       	mov	r12, r18
    11c0:	d1 2c       	mov	r13, r1
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <GLCD_SetPixels+0x8e>
    11c4:	cc 0c       	add	r12, r12
    11c6:	dd 1c       	adc	r13, r13
    11c8:	9a 95       	dec	r25
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <GLCD_SetPixels+0x8a>
    11cc:	6c 2c       	mov	r6, r12
    11ce:	61 2f       	mov	r22, r17
    11d0:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
    11d4:	81 2c       	mov	r8, r1
    11d6:	19 c0       	rjmp	.+50     	; 0x120a <GLCD_SetPixels+0xd0>
    11d8:	e9 e6       	ldi	r30, 0x69	; 105
    11da:	f1 e0       	ldi	r31, 0x01	; 1
    11dc:	71 80       	ldd	r7, Z+1	; 0x01
    11de:	c0 81       	ld	r28, Z
    11e0:	67 2d       	mov	r22, r7
    11e2:	8c 2f       	mov	r24, r28
    11e4:	0e 94 ba 06 	call	0xd74	; 0xd74 <GLCD_BufferRead>
    11e8:	0f 3f       	cpi	r16, 0xFF	; 255
    11ea:	19 f4       	brne	.+6      	; 0x11f2 <GLCD_SetPixels+0xb8>
    11ec:	46 2d       	mov	r20, r6
    11ee:	48 2b       	or	r20, r24
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <GLCD_SetPixels+0xbe>
    11f2:	4c 2d       	mov	r20, r12
    11f4:	40 95       	com	r20
    11f6:	48 23       	and	r20, r24
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	8c 0f       	add	r24, r28
    11fc:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <__GLCD>
    1200:	67 2d       	mov	r22, r7
    1202:	8c 2f       	mov	r24, r28
    1204:	0e 94 ac 06 	call	0xd58	; 0xd58 <GLCD_BufferWrite>
    1208:	83 94       	inc	r8
    120a:	8d 16       	cp	r8, r29
    120c:	28 f3       	brcs	.-54     	; 0x11d8 <GLCD_SetPixels+0x9e>
    120e:	16 c0       	rjmp	.+44     	; 0x123c <GLCD_SetPixels+0x102>
    1210:	88 e0       	ldi	r24, 0x08	; 8
    1212:	b8 0e       	add	r11, r24
    1214:	18 5f       	subi	r17, 0xF8	; 248
    1216:	61 2f       	mov	r22, r17
    1218:	8a 2d       	mov	r24, r10
    121a:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
    121e:	c0 e0       	ldi	r28, 0x00	; 0
    1220:	0b c0       	rjmp	.+22     	; 0x1238 <GLCD_SetPixels+0xfe>
    1222:	e9 e6       	ldi	r30, 0x69	; 105
    1224:	f1 e0       	ldi	r31, 0x01	; 1
    1226:	61 81       	ldd	r22, Z+1	; 0x01
    1228:	80 81       	ld	r24, Z
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	98 0f       	add	r25, r24
    122e:	90 83       	st	Z, r25
    1230:	40 2f       	mov	r20, r16
    1232:	0e 94 ac 06 	call	0xd58	; 0xd58 <GLCD_BufferWrite>
    1236:	cf 5f       	subi	r28, 0xFF	; 255
    1238:	cd 17       	cp	r28, r29
    123a:	98 f3       	brcs	.-26     	; 0x1222 <GLCD_SetPixels+0xe8>
    123c:	8b 2d       	mov	r24, r11
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9c 01       	movw	r18, r24
    1242:	28 5f       	subi	r18, 0xF8	; 248
    1244:	3f 4f       	sbci	r19, 0xFF	; 255
    1246:	e2 16       	cp	r14, r18
    1248:	f3 06       	cpc	r15, r19
    124a:	14 f7       	brge	.-60     	; 0x1210 <GLCD_SetPixels+0xd6>
    124c:	b9 14       	cp	r11, r9
    124e:	68 f5       	brcc	.+90     	; 0x12aa <GLCD_SetPixels+0x170>
    1250:	e8 1a       	sub	r14, r24
    1252:	f9 0a       	sbc	r15, r25
    1254:	8f ef       	ldi	r24, 0xFF	; 255
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 c0       	rjmp	.+4      	; 0x125e <GLCD_SetPixels+0x124>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	ea 94       	dec	r14
    1260:	e2 f7       	brpl	.-8      	; 0x125a <GLCD_SetPixels+0x120>
    1262:	e8 2e       	mov	r14, r24
    1264:	e0 94       	com	r14
    1266:	68 e0       	ldi	r22, 0x08	; 8
    1268:	61 0f       	add	r22, r17
    126a:	8a 2d       	mov	r24, r10
    126c:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
    1270:	10 e0       	ldi	r17, 0x00	; 0
    1272:	19 c0       	rjmp	.+50     	; 0x12a6 <GLCD_SetPixels+0x16c>
    1274:	e9 e6       	ldi	r30, 0x69	; 105
    1276:	f1 e0       	ldi	r31, 0x01	; 1
    1278:	f1 80       	ldd	r15, Z+1	; 0x01
    127a:	c0 81       	ld	r28, Z
    127c:	6f 2d       	mov	r22, r15
    127e:	8c 2f       	mov	r24, r28
    1280:	0e 94 ba 06 	call	0xd74	; 0xd74 <GLCD_BufferRead>
    1284:	0f 3f       	cpi	r16, 0xFF	; 255
    1286:	19 f4       	brne	.+6      	; 0x128e <GLCD_SetPixels+0x154>
    1288:	4e 2d       	mov	r20, r14
    128a:	48 2b       	or	r20, r24
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <GLCD_SetPixels+0x15a>
    128e:	4e 2d       	mov	r20, r14
    1290:	40 95       	com	r20
    1292:	48 23       	and	r20, r24
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	8c 0f       	add	r24, r28
    1298:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <__GLCD>
    129c:	6f 2d       	mov	r22, r15
    129e:	8c 2f       	mov	r24, r28
    12a0:	0e 94 ac 06 	call	0xd58	; 0xd58 <GLCD_BufferWrite>
    12a4:	1f 5f       	subi	r17, 0xFF	; 255
    12a6:	1d 17       	cp	r17, r29
    12a8:	28 f3       	brcs	.-54     	; 0x1274 <GLCD_SetPixels+0x13a>
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	df 90       	pop	r13
    12b8:	cf 90       	pop	r12
    12ba:	bf 90       	pop	r11
    12bc:	af 90       	pop	r10
    12be:	9f 90       	pop	r9
    12c0:	8f 90       	pop	r8
    12c2:	7f 90       	pop	r7
    12c4:	6f 90       	pop	r6
    12c6:	08 95       	ret

000012c8 <GLCD_DrawLine>:
    12c8:	8f 92       	push	r8
    12ca:	9f 92       	push	r9
    12cc:	af 92       	push	r10
    12ce:	bf 92       	push	r11
    12d0:	cf 92       	push	r12
    12d2:	df 92       	push	r13
    12d4:	ef 92       	push	r14
    12d6:	ff 92       	push	r15
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	c8 2f       	mov	r28, r24
    12e2:	d6 2f       	mov	r29, r22
    12e4:	14 2f       	mov	r17, r20
    12e6:	88 23       	and	r24, r24
    12e8:	0c f4       	brge	.+2      	; 0x12ec <GLCD_DrawLine+0x24>
    12ea:	74 c0       	rjmp	.+232    	; 0x13d4 <GLCD_DrawLine+0x10c>
    12ec:	44 23       	and	r20, r20
    12ee:	0c f4       	brge	.+2      	; 0x12f2 <GLCD_DrawLine+0x2a>
    12f0:	71 c0       	rjmp	.+226    	; 0x13d4 <GLCD_DrawLine+0x10c>
    12f2:	60 34       	cpi	r22, 0x40	; 64
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <GLCD_DrawLine+0x30>
    12f6:	6e c0       	rjmp	.+220    	; 0x13d4 <GLCD_DrawLine+0x10c>
    12f8:	20 34       	cpi	r18, 0x40	; 64
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <GLCD_DrawLine+0x36>
    12fc:	6b c0       	rjmp	.+214    	; 0x13d4 <GLCD_DrawLine+0x10c>
    12fe:	84 13       	cpse	r24, r20
    1300:	0a c0       	rjmp	.+20     	; 0x1316 <GLCD_DrawLine+0x4e>
    1302:	26 17       	cp	r18, r22
    1304:	10 f4       	brcc	.+4      	; 0x130a <GLCD_DrawLine+0x42>
    1306:	d2 2f       	mov	r29, r18
    1308:	26 2f       	mov	r18, r22
    130a:	4c 2f       	mov	r20, r28
    130c:	6d 2f       	mov	r22, r29
    130e:	8c 2f       	mov	r24, r28
    1310:	0e 94 9d 08 	call	0x113a	; 0x113a <GLCD_SetPixels>
    1314:	5f c0       	rjmp	.+190    	; 0x13d4 <GLCD_DrawLine+0x10c>
    1316:	62 13       	cpse	r22, r18
    1318:	0e c0       	rjmp	.+28     	; 0x1336 <GLCD_DrawLine+0x6e>
    131a:	48 17       	cp	r20, r24
    131c:	48 f4       	brcc	.+18     	; 0x1330 <GLCD_DrawLine+0x68>
    131e:	c4 2f       	mov	r28, r20
    1320:	18 2f       	mov	r17, r24
    1322:	06 c0       	rjmp	.+12     	; 0x1330 <GLCD_DrawLine+0x68>
    1324:	40 2f       	mov	r20, r16
    1326:	6d 2f       	mov	r22, r29
    1328:	8c 2f       	mov	r24, r28
    132a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <GLCD_SetPixel>
    132e:	cf 5f       	subi	r28, 0xFF	; 255
    1330:	1c 17       	cp	r17, r28
    1332:	c0 f7       	brcc	.-16     	; 0x1324 <GLCD_DrawLine+0x5c>
    1334:	4f c0       	rjmp	.+158    	; 0x13d4 <GLCD_DrawLine+0x10c>
    1336:	26 17       	cp	r18, r22
    1338:	28 f4       	brcc	.+10     	; 0x1344 <GLCD_DrawLine+0x7c>
    133a:	c6 2e       	mov	r12, r22
    133c:	d1 2c       	mov	r13, r1
    133e:	c2 1a       	sub	r12, r18
    1340:	d1 08       	sbc	r13, r1
    1342:	04 c0       	rjmp	.+8      	; 0x134c <GLCD_DrawLine+0x84>
    1344:	c2 2e       	mov	r12, r18
    1346:	d1 2c       	mov	r13, r1
    1348:	c6 1a       	sub	r12, r22
    134a:	d1 08       	sbc	r13, r1
    134c:	1c 17       	cp	r17, r28
    134e:	28 f4       	brcc	.+10     	; 0x135a <GLCD_DrawLine+0x92>
    1350:	ac 2e       	mov	r10, r28
    1352:	b1 2c       	mov	r11, r1
    1354:	a1 1a       	sub	r10, r17
    1356:	b1 08       	sbc	r11, r1
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <GLCD_DrawLine+0x9a>
    135a:	a1 2e       	mov	r10, r17
    135c:	b1 2c       	mov	r11, r1
    135e:	ac 1a       	sub	r10, r28
    1360:	b1 08       	sbc	r11, r1
    1362:	ac 14       	cp	r10, r12
    1364:	bd 04       	cpc	r11, r13
    1366:	34 f4       	brge	.+12     	; 0x1374 <GLCD_DrawLine+0xac>
    1368:	81 2f       	mov	r24, r17
    136a:	12 2f       	mov	r17, r18
    136c:	28 2f       	mov	r18, r24
    136e:	8c 2f       	mov	r24, r28
    1370:	cd 2f       	mov	r28, r29
    1372:	d8 2f       	mov	r29, r24
    1374:	1c 17       	cp	r17, r28
    1376:	30 f4       	brcc	.+12     	; 0x1384 <GLCD_DrawLine+0xbc>
    1378:	8d 2f       	mov	r24, r29
    137a:	d2 2f       	mov	r29, r18
    137c:	28 2f       	mov	r18, r24
    137e:	8c 2f       	mov	r24, r28
    1380:	c1 2f       	mov	r28, r17
    1382:	18 2f       	mov	r17, r24
    1384:	91 2e       	mov	r9, r17
    1386:	9c 1a       	sub	r9, r28
    1388:	d2 17       	cp	r29, r18
    138a:	18 f4       	brcc	.+6      	; 0x1392 <GLCD_DrawLine+0xca>
    138c:	e2 2e       	mov	r14, r18
    138e:	ed 1a       	sub	r14, r29
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <GLCD_DrawLine+0xce>
    1392:	ed 2e       	mov	r14, r29
    1394:	e2 1a       	sub	r14, r18
    1396:	f9 2c       	mov	r15, r9
    1398:	f6 94       	lsr	r15
    139a:	d2 17       	cp	r29, r18
    139c:	18 f4       	brcc	.+6      	; 0x13a4 <GLCD_DrawLine+0xdc>
    139e:	88 24       	eor	r8, r8
    13a0:	83 94       	inc	r8
    13a2:	16 c0       	rjmp	.+44     	; 0x13d0 <GLCD_DrawLine+0x108>
    13a4:	88 24       	eor	r8, r8
    13a6:	8a 94       	dec	r8
    13a8:	13 c0       	rjmp	.+38     	; 0x13d0 <GLCD_DrawLine+0x108>
    13aa:	ac 14       	cp	r10, r12
    13ac:	bd 04       	cpc	r11, r13
    13ae:	34 f4       	brge	.+12     	; 0x13bc <GLCD_DrawLine+0xf4>
    13b0:	40 2f       	mov	r20, r16
    13b2:	6c 2f       	mov	r22, r28
    13b4:	8d 2f       	mov	r24, r29
    13b6:	0e 94 62 08 	call	0x10c4	; 0x10c4 <GLCD_SetPixel>
    13ba:	05 c0       	rjmp	.+10     	; 0x13c6 <GLCD_DrawLine+0xfe>
    13bc:	40 2f       	mov	r20, r16
    13be:	6d 2f       	mov	r22, r29
    13c0:	8c 2f       	mov	r24, r28
    13c2:	0e 94 62 08 	call	0x10c4	; 0x10c4 <GLCD_SetPixel>
    13c6:	fe 18       	sub	r15, r14
    13c8:	12 f4       	brpl	.+4      	; 0x13ce <GLCD_DrawLine+0x106>
    13ca:	d8 0d       	add	r29, r8
    13cc:	f9 0c       	add	r15, r9
    13ce:	cf 5f       	subi	r28, 0xFF	; 255
    13d0:	1c 17       	cp	r17, r28
    13d2:	58 f7       	brcc	.-42     	; 0x13aa <GLCD_DrawLine+0xe2>
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	ff 90       	pop	r15
    13de:	ef 90       	pop	r14
    13e0:	df 90       	pop	r13
    13e2:	cf 90       	pop	r12
    13e4:	bf 90       	pop	r11
    13e6:	af 90       	pop	r10
    13e8:	9f 90       	pop	r9
    13ea:	8f 90       	pop	r8
    13ec:	08 95       	ret

000013ee <GLCD_DrawRectangle>:
    13ee:	df 92       	push	r13
    13f0:	ef 92       	push	r14
    13f2:	ff 92       	push	r15
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	88 23       	and	r24, r24
    13fe:	0c f4       	brge	.+2      	; 0x1402 <GLCD_DrawRectangle+0x14>
    1400:	45 c0       	rjmp	.+138    	; 0x148c <GLCD_DrawRectangle+0x9e>
    1402:	44 23       	and	r20, r20
    1404:	0c f4       	brge	.+2      	; 0x1408 <GLCD_DrawRectangle+0x1a>
    1406:	42 c0       	rjmp	.+132    	; 0x148c <GLCD_DrawRectangle+0x9e>
    1408:	60 34       	cpi	r22, 0x40	; 64
    140a:	08 f0       	brcs	.+2      	; 0x140e <GLCD_DrawRectangle+0x20>
    140c:	3f c0       	rjmp	.+126    	; 0x148c <GLCD_DrawRectangle+0x9e>
    140e:	20 34       	cpi	r18, 0x40	; 64
    1410:	e8 f5       	brcc	.+122    	; 0x148c <GLCD_DrawRectangle+0x9e>
    1412:	d0 2f       	mov	r29, r16
    1414:	12 2f       	mov	r17, r18
    1416:	d4 2e       	mov	r13, r20
    1418:	f6 2e       	mov	r15, r22
    141a:	e8 2e       	mov	r14, r24
    141c:	48 17       	cp	r20, r24
    141e:	18 f0       	brcs	.+6      	; 0x1426 <GLCD_DrawRectangle+0x38>
    1420:	04 2f       	mov	r16, r20
    1422:	c8 2f       	mov	r28, r24
    1424:	09 c0       	rjmp	.+18     	; 0x1438 <GLCD_DrawRectangle+0x4a>
    1426:	08 2f       	mov	r16, r24
    1428:	c4 2f       	mov	r28, r20
    142a:	06 c0       	rjmp	.+12     	; 0x1438 <GLCD_DrawRectangle+0x4a>
    142c:	4d 2f       	mov	r20, r29
    142e:	6f 2d       	mov	r22, r15
    1430:	8c 2f       	mov	r24, r28
    1432:	0e 94 62 08 	call	0x10c4	; 0x10c4 <GLCD_SetPixel>
    1436:	cf 5f       	subi	r28, 0xFF	; 255
    1438:	0c 17       	cp	r16, r28
    143a:	c0 f7       	brcc	.-16     	; 0x142c <GLCD_DrawRectangle+0x3e>
    143c:	de 14       	cp	r13, r14
    143e:	18 f0       	brcs	.+6      	; 0x1446 <GLCD_DrawRectangle+0x58>
    1440:	0d 2d       	mov	r16, r13
    1442:	ce 2d       	mov	r28, r14
    1444:	09 c0       	rjmp	.+18     	; 0x1458 <GLCD_DrawRectangle+0x6a>
    1446:	0e 2d       	mov	r16, r14
    1448:	cd 2d       	mov	r28, r13
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <GLCD_DrawRectangle+0x6a>
    144c:	4d 2f       	mov	r20, r29
    144e:	61 2f       	mov	r22, r17
    1450:	8c 2f       	mov	r24, r28
    1452:	0e 94 62 08 	call	0x10c4	; 0x10c4 <GLCD_SetPixel>
    1456:	cf 5f       	subi	r28, 0xFF	; 255
    1458:	0c 17       	cp	r16, r28
    145a:	c0 f7       	brcc	.-16     	; 0x144c <GLCD_DrawRectangle+0x5e>
    145c:	1f 15       	cp	r17, r15
    145e:	18 f0       	brcs	.+6      	; 0x1466 <GLCD_DrawRectangle+0x78>
    1460:	21 2f       	mov	r18, r17
    1462:	6f 2d       	mov	r22, r15
    1464:	02 c0       	rjmp	.+4      	; 0x146a <GLCD_DrawRectangle+0x7c>
    1466:	2f 2d       	mov	r18, r15
    1468:	61 2f       	mov	r22, r17
    146a:	0d 2f       	mov	r16, r29
    146c:	4e 2d       	mov	r20, r14
    146e:	8e 2d       	mov	r24, r14
    1470:	0e 94 9d 08 	call	0x113a	; 0x113a <GLCD_SetPixels>
    1474:	1f 15       	cp	r17, r15
    1476:	18 f0       	brcs	.+6      	; 0x147e <GLCD_DrawRectangle+0x90>
    1478:	21 2f       	mov	r18, r17
    147a:	6f 2d       	mov	r22, r15
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <GLCD_DrawRectangle+0x94>
    147e:	2f 2d       	mov	r18, r15
    1480:	61 2f       	mov	r22, r17
    1482:	0d 2f       	mov	r16, r29
    1484:	4d 2d       	mov	r20, r13
    1486:	8d 2d       	mov	r24, r13
    1488:	0e 94 9d 08 	call	0x113a	; 0x113a <GLCD_SetPixels>
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	df 90       	pop	r13
    149a:	08 95       	ret

0000149c <GLCD_DrawTriangle>:
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	88 23       	and	r24, r24
    14ae:	fc f0       	brlt	.+62     	; 0x14ee <GLCD_DrawTriangle+0x52>
    14b0:	44 23       	and	r20, r20
    14b2:	ec f0       	brlt	.+58     	; 0x14ee <GLCD_DrawTriangle+0x52>
    14b4:	00 23       	and	r16, r16
    14b6:	dc f0       	brlt	.+54     	; 0x14ee <GLCD_DrawTriangle+0x52>
    14b8:	60 34       	cpi	r22, 0x40	; 64
    14ba:	c8 f4       	brcc	.+50     	; 0x14ee <GLCD_DrawTriangle+0x52>
    14bc:	20 34       	cpi	r18, 0x40	; 64
    14be:	b8 f4       	brcc	.+46     	; 0x14ee <GLCD_DrawTriangle+0x52>
    14c0:	9f e3       	ldi	r25, 0x3F	; 63
    14c2:	9e 15       	cp	r25, r14
    14c4:	a0 f0       	brcs	.+40     	; 0x14ee <GLCD_DrawTriangle+0x52>
    14c6:	10 2f       	mov	r17, r16
    14c8:	d2 2e       	mov	r13, r18
    14ca:	d4 2f       	mov	r29, r20
    14cc:	f6 2e       	mov	r15, r22
    14ce:	c8 2f       	mov	r28, r24
    14d0:	0c 2d       	mov	r16, r12
    14d2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GLCD_DrawLine>
    14d6:	2e 2d       	mov	r18, r14
    14d8:	41 2f       	mov	r20, r17
    14da:	6d 2d       	mov	r22, r13
    14dc:	8d 2f       	mov	r24, r29
    14de:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GLCD_DrawLine>
    14e2:	2f 2d       	mov	r18, r15
    14e4:	4c 2f       	mov	r20, r28
    14e6:	6e 2d       	mov	r22, r14
    14e8:	81 2f       	mov	r24, r17
    14ea:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GLCD_DrawLine>
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	08 95       	ret

00001500 <GLCD_FillScreen>:
    1500:	1f 93       	push	r17
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	18 2f       	mov	r17, r24
    1508:	d0 e0       	ldi	r29, 0x00	; 0
    150a:	0b c0       	rjmp	.+22     	; 0x1522 <GLCD_FillScreen+0x22>
    150c:	41 2f       	mov	r20, r17
    150e:	6d 2f       	mov	r22, r29
    1510:	8c 2f       	mov	r24, r28
    1512:	0e 94 ac 06 	call	0xd58	; 0xd58 <GLCD_BufferWrite>
    1516:	cf 5f       	subi	r28, 0xFF	; 255
    1518:	01 c0       	rjmp	.+2      	; 0x151c <GLCD_FillScreen+0x1c>
    151a:	c0 e0       	ldi	r28, 0x00	; 0
    151c:	cc 23       	and	r28, r28
    151e:	b4 f7       	brge	.-20     	; 0x150c <GLCD_FillScreen+0xc>
    1520:	d8 5f       	subi	r29, 0xF8	; 248
    1522:	d0 34       	cpi	r29, 0x40	; 64
    1524:	d0 f3       	brcs	.-12     	; 0x151a <GLCD_FillScreen+0x1a>
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	1f 91       	pop	r17
    152c:	08 95       	ret

0000152e <GLCD_Clear>:
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	0e 94 80 0a 	call	0x1500	; 0x1500 <GLCD_FillScreen>
    1534:	08 95       	ret

00001536 <GLCD_InvertScreen>:
    1536:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <__GLCD+0x2>
    153a:	87 3a       	cpi	r24, 0xA7	; 167
    153c:	21 f4       	brne	.+8      	; 0x1546 <GLCD_InvertScreen+0x10>
    153e:	86 ea       	ldi	r24, 0xA6	; 166
    1540:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <__GLCD+0x2>
    1544:	03 c0       	rjmp	.+6      	; 0x154c <GLCD_InvertScreen+0x16>
    1546:	87 ea       	ldi	r24, 0xA7	; 167
    1548:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <__GLCD+0x2>
    154c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <__GLCD+0x2>
    1550:	0e 94 bc 07 	call	0xf78	; 0xf78 <GLCD_SendCommand>
    1554:	08 95       	ret

00001556 <GLCD_SetFont>:
    1556:	66 23       	and	r22, r22
    1558:	e4 f0       	brlt	.+56     	; 0x1592 <GLCD_SetFont+0x3c>
    155a:	40 34       	cpi	r20, 0x40	; 64
    155c:	d0 f4       	brcc	.+52     	; 0x1592 <GLCD_SetFont+0x3c>
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	c0 f4       	brcc	.+48     	; 0x1592 <GLCD_SetFont+0x3c>
    1562:	e9 e6       	ldi	r30, 0x69	; 105
    1564:	f1 e0       	ldi	r31, 0x01	; 1
    1566:	94 83       	std	Z+4, r25	; 0x04
    1568:	83 83       	std	Z+3, r24	; 0x03
    156a:	65 83       	std	Z+5, r22	; 0x05
    156c:	46 83       	std	Z+6, r20	; 0x06
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	41 50       	subi	r20, 0x01	; 1
    1572:	51 09       	sbc	r21, r1
    1574:	ca 01       	movw	r24, r20
    1576:	99 23       	and	r25, r25
    1578:	0c f4       	brge	.+2      	; 0x157c <GLCD_SetFont+0x26>
    157a:	07 96       	adiw	r24, 0x07	; 7
    157c:	95 95       	asr	r25
    157e:	87 95       	ror	r24
    1580:	95 95       	asr	r25
    1582:	87 95       	ror	r24
    1584:	95 95       	asr	r25
    1586:	87 95       	ror	r24
    1588:	e9 e6       	ldi	r30, 0x69	; 105
    158a:	f1 e0       	ldi	r31, 0x01	; 1
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	87 83       	std	Z+7, r24	; 0x07
    1590:	20 87       	std	Z+8, r18	; 0x08
    1592:	08 95       	ret

00001594 <GLCD_PrintChar>:
    1594:	4f 92       	push	r4
    1596:	5f 92       	push	r5
    1598:	6f 92       	push	r6
    159a:	7f 92       	push	r7
    159c:	8f 92       	push	r8
    159e:	9f 92       	push	r9
    15a0:	af 92       	push	r10
    15a2:	bf 92       	push	r11
    15a4:	cf 92       	push	r12
    15a6:	df 92       	push	r13
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	a9 e6       	ldi	r26, 0x69	; 105
    15b6:	b1 e0       	ldi	r27, 0x01	; 1
    15b8:	5c 90       	ld	r5, X
    15ba:	11 96       	adiw	r26, 0x01	; 1
    15bc:	4c 90       	ld	r4, X
    15be:	11 97       	sbiw	r26, 0x01	; 1
    15c0:	80 52       	subi	r24, 0x20	; 32
    15c2:	15 96       	adiw	r26, 0x05	; 5
    15c4:	9c 91       	ld	r25, X
    15c6:	15 97       	sbiw	r26, 0x05	; 5
    15c8:	17 96       	adiw	r26, 0x07	; 7
    15ca:	2c 91       	ld	r18, X
    15cc:	17 97       	sbiw	r26, 0x07	; 7
    15ce:	92 9f       	mul	r25, r18
    15d0:	90 01       	movw	r18, r0
    15d2:	11 24       	eor	r1, r1
    15d4:	2f 5f       	subi	r18, 0xFF	; 255
    15d6:	3f 4f       	sbci	r19, 0xFF	; 255
    15d8:	82 9f       	mul	r24, r18
    15da:	a0 01       	movw	r20, r0
    15dc:	83 9f       	mul	r24, r19
    15de:	50 0d       	add	r21, r0
    15e0:	11 24       	eor	r1, r1
    15e2:	13 96       	adiw	r26, 0x03	; 3
    15e4:	ed 91       	ld	r30, X+
    15e6:	fc 91       	ld	r31, X
    15e8:	14 97       	sbiw	r26, 0x04	; 4
    15ea:	5a 01       	movw	r10, r20
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	a8 1a       	sub	r10, r24
    15f0:	b8 0a       	sbc	r11, r24
    15f2:	e4 0f       	add	r30, r20
    15f4:	f5 1f       	adc	r31, r21
    15f6:	74 90       	lpm	r7, Z
    15f8:	84 2d       	mov	r24, r4
    15fa:	87 70       	andi	r24, 0x07	; 7
    15fc:	98 2e       	mov	r9, r24
    15fe:	64 2c       	mov	r6, r4
    1600:	81 2c       	mov	r8, r1
    1602:	5f c0       	rjmp	.+190    	; 0x16c2 <GLCD_PrintChar+0x12e>
    1604:	66 2d       	mov	r22, r6
    1606:	85 2d       	mov	r24, r5
    1608:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
    160c:	75 01       	movw	r14, r10
    160e:	e8 0c       	add	r14, r8
    1610:	f1 1c       	adc	r15, r1
    1612:	67 01       	movw	r12, r14
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	c8 1a       	sub	r12, r24
    1618:	d1 08       	sbc	r13, r1
    161a:	10 e0       	ldi	r17, 0x00	; 0
    161c:	41 c0       	rjmp	.+130    	; 0x16a0 <GLCD_PrintChar+0x10c>
    161e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__GLCD+0x3>
    1622:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <__GLCD+0x4>
    1626:	fc 01       	movw	r30, r24
    1628:	ee 0d       	add	r30, r14
    162a:	ff 1d       	adc	r31, r15
    162c:	24 91       	lpm	r18, Z
    162e:	49 2d       	mov	r20, r9
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	09 2c       	mov	r0, r9
    1636:	02 c0       	rjmp	.+4      	; 0x163c <GLCD_PrintChar+0xa8>
    1638:	22 0f       	add	r18, r18
    163a:	33 1f       	adc	r19, r19
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <GLCD_PrintChar+0xa4>
    1640:	02 2f       	mov	r16, r18
    1642:	88 20       	and	r8, r8
    1644:	a1 f0       	breq	.+40     	; 0x166e <GLCD_PrintChar+0xda>
    1646:	fc 01       	movw	r30, r24
    1648:	ec 0d       	add	r30, r12
    164a:	fd 1d       	adc	r31, r13
    164c:	e4 91       	lpm	r30, Z
    164e:	88 e0       	ldi	r24, 0x08	; 8
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	84 1b       	sub	r24, r20
    1654:	95 0b       	sbc	r25, r21
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	02 c0       	rjmp	.+4      	; 0x165e <GLCD_PrintChar+0xca>
    165a:	f5 95       	asr	r31
    165c:	e7 95       	ror	r30
    165e:	8a 95       	dec	r24
    1660:	e2 f7       	brpl	.-8      	; 0x165a <GLCD_PrintChar+0xc6>
    1662:	0e 2f       	mov	r16, r30
    1664:	02 2b       	or	r16, r18
    1666:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__GLCD+0x7>
    166a:	c8 0e       	add	r12, r24
    166c:	d1 1c       	adc	r13, r1
    166e:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <__GLCD+0x8>
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	39 f4       	brne	.+14     	; 0x1684 <GLCD_PrintChar+0xf0>
    1676:	e9 e6       	ldi	r30, 0x69	; 105
    1678:	f1 e0       	ldi	r31, 0x01	; 1
    167a:	61 81       	ldd	r22, Z+1	; 0x01
    167c:	80 81       	ld	r24, Z
    167e:	0e 94 ba 06 	call	0xd74	; 0xd74 <GLCD_BufferRead>
    1682:	08 2b       	or	r16, r24
    1684:	c9 e6       	ldi	r28, 0x69	; 105
    1686:	d1 e0       	ldi	r29, 0x01	; 1
    1688:	69 81       	ldd	r22, Y+1	; 0x01
    168a:	88 81       	ld	r24, Y
    168c:	91 e0       	ldi	r25, 0x01	; 1
    168e:	98 0f       	add	r25, r24
    1690:	98 83       	st	Y, r25
    1692:	40 2f       	mov	r20, r16
    1694:	0e 94 ac 06 	call	0xd58	; 0xd58 <GLCD_BufferWrite>
    1698:	8f 81       	ldd	r24, Y+7	; 0x07
    169a:	e8 0e       	add	r14, r24
    169c:	f1 1c       	adc	r15, r1
    169e:	1f 5f       	subi	r17, 0xFF	; 255
    16a0:	17 15       	cp	r17, r7
    16a2:	08 f4       	brcc	.+2      	; 0x16a6 <GLCD_PrintChar+0x112>
    16a4:	bc cf       	rjmp	.-136    	; 0x161e <GLCD_PrintChar+0x8a>
    16a6:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <__GLCD+0x8>
    16aa:	81 11       	cpse	r24, r1
    16ac:	07 c0       	rjmp	.+14     	; 0x16bc <GLCD_PrintChar+0x128>
    16ae:	e9 e6       	ldi	r30, 0x69	; 105
    16b0:	f1 e0       	ldi	r31, 0x01	; 1
    16b2:	40 e0       	ldi	r20, 0x00	; 0
    16b4:	61 81       	ldd	r22, Z+1	; 0x01
    16b6:	80 81       	ld	r24, Z
    16b8:	0e 94 ac 06 	call	0xd58	; 0xd58 <GLCD_BufferWrite>
    16bc:	88 e0       	ldi	r24, 0x08	; 8
    16be:	68 0e       	add	r6, r24
    16c0:	83 94       	inc	r8
    16c2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__GLCD+0x7>
    16c6:	88 16       	cp	r8, r24
    16c8:	08 f4       	brcc	.+2      	; 0x16cc <GLCD_PrintChar+0x138>
    16ca:	9c cf       	rjmp	.-200    	; 0x1604 <GLCD_PrintChar+0x70>
    16cc:	24 2d       	mov	r18, r4
    16ce:	26 95       	lsr	r18
    16d0:	26 95       	lsr	r18
    16d2:	26 95       	lsr	r18
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <__GLCD+0x6>
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	84 0d       	add	r24, r4
    16de:	91 1d       	adc	r25, r1
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	ac 01       	movw	r20, r24
    16e4:	12 f4       	brpl	.+4      	; 0x16ea <GLCD_PrintChar+0x156>
    16e6:	49 5f       	subi	r20, 0xF9	; 249
    16e8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ea:	55 95       	asr	r21
    16ec:	47 95       	ror	r20
    16ee:	55 95       	asr	r21
    16f0:	47 95       	ror	r20
    16f2:	55 95       	asr	r21
    16f4:	47 95       	ror	r20
    16f6:	24 17       	cp	r18, r20
    16f8:	35 07       	cpc	r19, r21
    16fa:	09 f4       	brne	.+2      	; 0x16fe <GLCD_PrintChar+0x16a>
    16fc:	45 c0       	rjmp	.+138    	; 0x1788 <GLCD_PrintChar+0x1f4>
    16fe:	8f e3       	ldi	r24, 0x3F	; 63
    1700:	86 15       	cp	r24, r6
    1702:	08 f4       	brcc	.+2      	; 0x1706 <GLCD_PrintChar+0x172>
    1704:	41 c0       	rjmp	.+130    	; 0x1788 <GLCD_PrintChar+0x1f4>
    1706:	66 2d       	mov	r22, r6
    1708:	85 2d       	mov	r24, r5
    170a:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
    170e:	a8 0c       	add	r10, r8
    1710:	b1 1c       	adc	r11, r1
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	a8 1a       	sub	r10, r24
    1716:	b1 08       	sbc	r11, r1
    1718:	00 e0       	ldi	r16, 0x00	; 0
    171a:	29 c0       	rjmp	.+82     	; 0x176e <GLCD_PrintChar+0x1da>
    171c:	c9 e6       	ldi	r28, 0x69	; 105
    171e:	d1 e0       	ldi	r29, 0x01	; 1
    1720:	f9 80       	ldd	r15, Y+1	; 0x01
    1722:	18 81       	ld	r17, Y
    1724:	6f 2d       	mov	r22, r15
    1726:	81 2f       	mov	r24, r17
    1728:	0e 94 ba 06 	call	0xd74	; 0xd74 <GLCD_BufferRead>
    172c:	eb 81       	ldd	r30, Y+3	; 0x03
    172e:	fc 81       	ldd	r31, Y+4	; 0x04
    1730:	ea 0d       	add	r30, r10
    1732:	fb 1d       	adc	r31, r11
    1734:	44 91       	lpm	r20, Z
    1736:	28 e0       	ldi	r18, 0x08	; 8
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	29 19       	sub	r18, r9
    173c:	31 09       	sbc	r19, r1
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <GLCD_PrintChar+0x1b2>
    1742:	55 95       	asr	r21
    1744:	47 95       	ror	r20
    1746:	2a 95       	dec	r18
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <GLCD_PrintChar+0x1ae>
    174a:	48 2b       	or	r20, r24
    174c:	98 85       	ldd	r25, Y+8	; 0x08
    174e:	91 30       	cpi	r25, 0x01	; 1
    1750:	09 f4       	brne	.+2      	; 0x1754 <GLCD_PrintChar+0x1c0>
    1752:	48 2b       	or	r20, r24
    1754:	c9 e6       	ldi	r28, 0x69	; 105
    1756:	d1 e0       	ldi	r29, 0x01	; 1
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	81 0f       	add	r24, r17
    175c:	88 83       	st	Y, r24
    175e:	6f 2d       	mov	r22, r15
    1760:	81 2f       	mov	r24, r17
    1762:	0e 94 ac 06 	call	0xd58	; 0xd58 <GLCD_BufferWrite>
    1766:	8f 81       	ldd	r24, Y+7	; 0x07
    1768:	a8 0e       	add	r10, r24
    176a:	b1 1c       	adc	r11, r1
    176c:	0f 5f       	subi	r16, 0xFF	; 255
    176e:	07 15       	cp	r16, r7
    1770:	a8 f2       	brcs	.-86     	; 0x171c <GLCD_PrintChar+0x188>
    1772:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <__GLCD+0x8>
    1776:	81 11       	cpse	r24, r1
    1778:	07 c0       	rjmp	.+14     	; 0x1788 <GLCD_PrintChar+0x1f4>
    177a:	e9 e6       	ldi	r30, 0x69	; 105
    177c:	f1 e0       	ldi	r31, 0x01	; 1
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	61 81       	ldd	r22, Z+1	; 0x01
    1782:	80 81       	ld	r24, Z
    1784:	0e 94 ac 06 	call	0xd58	; 0xd58 <GLCD_BufferWrite>
    1788:	85 2d       	mov	r24, r5
    178a:	87 0d       	add	r24, r7
    178c:	64 2d       	mov	r22, r4
    178e:	8f 5f       	subi	r24, 0xFF	; 255
    1790:	0e 94 fb 07 	call	0xff6	; 0xff6 <GLCD_GotoXY>
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	ff 90       	pop	r15
    179e:	ef 90       	pop	r14
    17a0:	df 90       	pop	r13
    17a2:	cf 90       	pop	r12
    17a4:	bf 90       	pop	r11
    17a6:	af 90       	pop	r10
    17a8:	9f 90       	pop	r9
    17aa:	8f 90       	pop	r8
    17ac:	7f 90       	pop	r7
    17ae:	6f 90       	pop	r6
    17b0:	5f 90       	pop	r5
    17b2:	4f 90       	pop	r4
    17b4:	08 95       	ret

000017b6 <GLCD_PrintString>:
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	ec 01       	movw	r28, r24
    17bc:	0d c0       	rjmp	.+26     	; 0x17d8 <GLCD_PrintString+0x22>
    17be:	e9 e6       	ldi	r30, 0x69	; 105
    17c0:	f1 e0       	ldi	r31, 0x01	; 1
    17c2:	90 81       	ld	r25, Z
    17c4:	25 81       	ldd	r18, Z+5	; 0x05
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	29 0f       	add	r18, r25
    17ca:	31 1d       	adc	r19, r1
    17cc:	20 38       	cpi	r18, 0x80	; 128
    17ce:	31 05       	cpc	r19, r1
    17d0:	34 f4       	brge	.+12     	; 0x17de <GLCD_PrintString+0x28>
    17d2:	21 96       	adiw	r28, 0x01	; 1
    17d4:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GLCD_PrintChar>
    17d8:	88 81       	ld	r24, Y
    17da:	81 11       	cpse	r24, r1
    17dc:	f0 cf       	rjmp	.-32     	; 0x17be <GLCD_PrintString+0x8>
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <GLCD_PrintInteger>:

void GLCD_PrintInteger(const int32_t Value)
{
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	2c 97       	sbiw	r28, 0x0c	; 12
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    17fc:	61 15       	cp	r22, r1
    17fe:	71 05       	cpc	r23, r1
    1800:	81 05       	cpc	r24, r1
    1802:	91 05       	cpc	r25, r1
    1804:	21 f4       	brne	.+8      	; 0x180e <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    1806:	80 e3       	ldi	r24, 0x30	; 48
    1808:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GLCD_PrintChar>
    180c:	14 c0       	rjmp	.+40     	; 0x1836 <GLCD_PrintInteger+0x52>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    180e:	61 15       	cp	r22, r1
    1810:	71 05       	cpc	r23, r1
    1812:	81 05       	cpc	r24, r1
    1814:	20 e8       	ldi	r18, 0x80	; 128
    1816:	92 07       	cpc	r25, r18
    1818:	71 f0       	breq	.+28     	; 0x1836 <GLCD_PrintInteger+0x52>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    181a:	8e 01       	movw	r16, r28
    181c:	0f 5f       	subi	r16, 0xFF	; 255
    181e:	1f 4f       	sbci	r17, 0xFF	; 255
    1820:	2c e0       	ldi	r18, 0x0C	; 12
    1822:	f8 01       	movw	r30, r16
    1824:	11 92       	st	Z+, r1
    1826:	2a 95       	dec	r18
    1828:	e9 f7       	brne	.-6      	; 0x1824 <GLCD_PrintInteger+0x40>
		
		//Convert integer to array
		Int2bcd(Value, bcd);
    182a:	a8 01       	movw	r20, r16
    182c:	0e 94 c8 06 	call	0xd90	; 0xd90 <Int2bcd>
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    1830:	c8 01       	movw	r24, r16
    1832:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GLCD_PrintString>
	}
}
    1836:	2c 96       	adiw	r28, 0x0c	; 12
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	08 95       	ret

0000184c <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    184c:	87 b1       	in	r24, 0x07	; 7
    184e:	80 61       	ori	r24, 0x10	; 16
    1850:	87 b9       	out	0x07, r24	; 7
	PinMode(TWI_SCL, Output);
    1852:	87 b1       	in	r24, 0x07	; 7
    1854:	80 62       	ori	r24, 0x20	; 32
    1856:	87 b9       	out	0x07, r24	; 7
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    1858:	88 b1       	in	r24, 0x08	; 8
    185a:	80 61       	ori	r24, 0x10	; 16
    185c:	88 b9       	out	0x08, r24	; 8
	DigitalWrite(TWI_SCL, High);
    185e:	88 b1       	in	r24, 0x08	; 8
    1860:	80 62       	ori	r24, 0x20	; 32
    1862:	88 b9       	out	0x08, r24	; 8

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    1864:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    1868:	88 e4       	ldi	r24, 0x48	; 72
    186a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    186e:	84 e0       	ldi	r24, 0x04	; 4
    1870:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1874:	08 95       	ret

00001876 <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    1876:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
}
    187a:	88 7f       	andi	r24, 0xF8	; 248
    187c:	08 95       	ret

0000187e <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    187e:	84 ea       	ldi	r24, 0xA4	; 164
    1880:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    1884:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1888:	88 23       	and	r24, r24
    188a:	e4 f7       	brge	.-8      	; 0x1884 <TWI_BeginTransmission+0x6>

	//Return status register
	return (TWI_Status());
    188c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TWI_Status>
}
    1890:	08 95       	ret

00001892 <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    1892:	85 ed       	ldi	r24, 0xD5	; 213
    1894:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    1898:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    189c:	84 fd       	sbrc	r24, 4
    189e:	fc cf       	rjmp	.-8      	; 0x1898 <TWI_EndTransmission+0x6>
}
    18a0:	08 95       	ret

000018a2 <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    18a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    18a6:	84 e8       	ldi	r24, 0x84	; 132
    18a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    18ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    18b0:	88 23       	and	r24, r24
    18b2:	e4 f7       	brge	.-8      	; 0x18ac <TWI_Transmit+0xa>

	//Return status register
	return (TWI_Status());
    18b4:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TWI_Status>
}
    18b8:	08 95       	ret

000018ba <__subsf3>:
    18ba:	50 58       	subi	r21, 0x80	; 128

000018bc <__addsf3>:
    18bc:	bb 27       	eor	r27, r27
    18be:	aa 27       	eor	r26, r26
    18c0:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__addsf3x>
    18c4:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_round>
    18c8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fp_pscA>
    18cc:	38 f0       	brcs	.+14     	; 0x18dc <__addsf3+0x20>
    18ce:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__fp_pscB>
    18d2:	20 f0       	brcs	.+8      	; 0x18dc <__addsf3+0x20>
    18d4:	39 f4       	brne	.+14     	; 0x18e4 <__addsf3+0x28>
    18d6:	9f 3f       	cpi	r25, 0xFF	; 255
    18d8:	19 f4       	brne	.+6      	; 0x18e0 <__addsf3+0x24>
    18da:	26 f4       	brtc	.+8      	; 0x18e4 <__addsf3+0x28>
    18dc:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__fp_nan>
    18e0:	0e f4       	brtc	.+2      	; 0x18e4 <__addsf3+0x28>
    18e2:	e0 95       	com	r30
    18e4:	e7 fb       	bst	r30, 7
    18e6:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_inf>

000018ea <__addsf3x>:
    18ea:	e9 2f       	mov	r30, r25
    18ec:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__fp_split3>
    18f0:	58 f3       	brcs	.-42     	; 0x18c8 <__addsf3+0xc>
    18f2:	ba 17       	cp	r27, r26
    18f4:	62 07       	cpc	r22, r18
    18f6:	73 07       	cpc	r23, r19
    18f8:	84 07       	cpc	r24, r20
    18fa:	95 07       	cpc	r25, r21
    18fc:	20 f0       	brcs	.+8      	; 0x1906 <__addsf3x+0x1c>
    18fe:	79 f4       	brne	.+30     	; 0x191e <__addsf3x+0x34>
    1900:	a6 f5       	brtc	.+104    	; 0x196a <__addsf3x+0x80>
    1902:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__fp_zero>
    1906:	0e f4       	brtc	.+2      	; 0x190a <__addsf3x+0x20>
    1908:	e0 95       	com	r30
    190a:	0b 2e       	mov	r0, r27
    190c:	ba 2f       	mov	r27, r26
    190e:	a0 2d       	mov	r26, r0
    1910:	0b 01       	movw	r0, r22
    1912:	b9 01       	movw	r22, r18
    1914:	90 01       	movw	r18, r0
    1916:	0c 01       	movw	r0, r24
    1918:	ca 01       	movw	r24, r20
    191a:	a0 01       	movw	r20, r0
    191c:	11 24       	eor	r1, r1
    191e:	ff 27       	eor	r31, r31
    1920:	59 1b       	sub	r21, r25
    1922:	99 f0       	breq	.+38     	; 0x194a <__addsf3x+0x60>
    1924:	59 3f       	cpi	r21, 0xF9	; 249
    1926:	50 f4       	brcc	.+20     	; 0x193c <__addsf3x+0x52>
    1928:	50 3e       	cpi	r21, 0xE0	; 224
    192a:	68 f1       	brcs	.+90     	; 0x1986 <__addsf3x+0x9c>
    192c:	1a 16       	cp	r1, r26
    192e:	f0 40       	sbci	r31, 0x00	; 0
    1930:	a2 2f       	mov	r26, r18
    1932:	23 2f       	mov	r18, r19
    1934:	34 2f       	mov	r19, r20
    1936:	44 27       	eor	r20, r20
    1938:	58 5f       	subi	r21, 0xF8	; 248
    193a:	f3 cf       	rjmp	.-26     	; 0x1922 <__addsf3x+0x38>
    193c:	46 95       	lsr	r20
    193e:	37 95       	ror	r19
    1940:	27 95       	ror	r18
    1942:	a7 95       	ror	r26
    1944:	f0 40       	sbci	r31, 0x00	; 0
    1946:	53 95       	inc	r21
    1948:	c9 f7       	brne	.-14     	; 0x193c <__addsf3x+0x52>
    194a:	7e f4       	brtc	.+30     	; 0x196a <__addsf3x+0x80>
    194c:	1f 16       	cp	r1, r31
    194e:	ba 0b       	sbc	r27, r26
    1950:	62 0b       	sbc	r22, r18
    1952:	73 0b       	sbc	r23, r19
    1954:	84 0b       	sbc	r24, r20
    1956:	ba f0       	brmi	.+46     	; 0x1986 <__addsf3x+0x9c>
    1958:	91 50       	subi	r25, 0x01	; 1
    195a:	a1 f0       	breq	.+40     	; 0x1984 <__addsf3x+0x9a>
    195c:	ff 0f       	add	r31, r31
    195e:	bb 1f       	adc	r27, r27
    1960:	66 1f       	adc	r22, r22
    1962:	77 1f       	adc	r23, r23
    1964:	88 1f       	adc	r24, r24
    1966:	c2 f7       	brpl	.-16     	; 0x1958 <__addsf3x+0x6e>
    1968:	0e c0       	rjmp	.+28     	; 0x1986 <__addsf3x+0x9c>
    196a:	ba 0f       	add	r27, r26
    196c:	62 1f       	adc	r22, r18
    196e:	73 1f       	adc	r23, r19
    1970:	84 1f       	adc	r24, r20
    1972:	48 f4       	brcc	.+18     	; 0x1986 <__addsf3x+0x9c>
    1974:	87 95       	ror	r24
    1976:	77 95       	ror	r23
    1978:	67 95       	ror	r22
    197a:	b7 95       	ror	r27
    197c:	f7 95       	ror	r31
    197e:	9e 3f       	cpi	r25, 0xFE	; 254
    1980:	08 f0       	brcs	.+2      	; 0x1984 <__addsf3x+0x9a>
    1982:	b0 cf       	rjmp	.-160    	; 0x18e4 <__addsf3+0x28>
    1984:	93 95       	inc	r25
    1986:	88 0f       	add	r24, r24
    1988:	08 f0       	brcs	.+2      	; 0x198c <__addsf3x+0xa2>
    198a:	99 27       	eor	r25, r25
    198c:	ee 0f       	add	r30, r30
    198e:	97 95       	ror	r25
    1990:	87 95       	ror	r24
    1992:	08 95       	ret

00001994 <__divsf3>:
    1994:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__divsf3x>
    1998:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_round>
    199c:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__fp_pscB>
    19a0:	58 f0       	brcs	.+22     	; 0x19b8 <__divsf3+0x24>
    19a2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fp_pscA>
    19a6:	40 f0       	brcs	.+16     	; 0x19b8 <__divsf3+0x24>
    19a8:	29 f4       	brne	.+10     	; 0x19b4 <__divsf3+0x20>
    19aa:	5f 3f       	cpi	r21, 0xFF	; 255
    19ac:	29 f0       	breq	.+10     	; 0x19b8 <__divsf3+0x24>
    19ae:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_inf>
    19b2:	51 11       	cpse	r21, r1
    19b4:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__fp_szero>
    19b8:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__fp_nan>

000019bc <__divsf3x>:
    19bc:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__fp_split3>
    19c0:	68 f3       	brcs	.-38     	; 0x199c <__divsf3+0x8>

000019c2 <__divsf3_pse>:
    19c2:	99 23       	and	r25, r25
    19c4:	b1 f3       	breq	.-20     	; 0x19b2 <__divsf3+0x1e>
    19c6:	55 23       	and	r21, r21
    19c8:	91 f3       	breq	.-28     	; 0x19ae <__divsf3+0x1a>
    19ca:	95 1b       	sub	r25, r21
    19cc:	55 0b       	sbc	r21, r21
    19ce:	bb 27       	eor	r27, r27
    19d0:	aa 27       	eor	r26, r26
    19d2:	62 17       	cp	r22, r18
    19d4:	73 07       	cpc	r23, r19
    19d6:	84 07       	cpc	r24, r20
    19d8:	38 f0       	brcs	.+14     	; 0x19e8 <__divsf3_pse+0x26>
    19da:	9f 5f       	subi	r25, 0xFF	; 255
    19dc:	5f 4f       	sbci	r21, 0xFF	; 255
    19de:	22 0f       	add	r18, r18
    19e0:	33 1f       	adc	r19, r19
    19e2:	44 1f       	adc	r20, r20
    19e4:	aa 1f       	adc	r26, r26
    19e6:	a9 f3       	breq	.-22     	; 0x19d2 <__divsf3_pse+0x10>
    19e8:	35 d0       	rcall	.+106    	; 0x1a54 <__divsf3_pse+0x92>
    19ea:	0e 2e       	mov	r0, r30
    19ec:	3a f0       	brmi	.+14     	; 0x19fc <__divsf3_pse+0x3a>
    19ee:	e0 e8       	ldi	r30, 0x80	; 128
    19f0:	32 d0       	rcall	.+100    	; 0x1a56 <__divsf3_pse+0x94>
    19f2:	91 50       	subi	r25, 0x01	; 1
    19f4:	50 40       	sbci	r21, 0x00	; 0
    19f6:	e6 95       	lsr	r30
    19f8:	00 1c       	adc	r0, r0
    19fa:	ca f7       	brpl	.-14     	; 0x19ee <__divsf3_pse+0x2c>
    19fc:	2b d0       	rcall	.+86     	; 0x1a54 <__divsf3_pse+0x92>
    19fe:	fe 2f       	mov	r31, r30
    1a00:	29 d0       	rcall	.+82     	; 0x1a54 <__divsf3_pse+0x92>
    1a02:	66 0f       	add	r22, r22
    1a04:	77 1f       	adc	r23, r23
    1a06:	88 1f       	adc	r24, r24
    1a08:	bb 1f       	adc	r27, r27
    1a0a:	26 17       	cp	r18, r22
    1a0c:	37 07       	cpc	r19, r23
    1a0e:	48 07       	cpc	r20, r24
    1a10:	ab 07       	cpc	r26, r27
    1a12:	b0 e8       	ldi	r27, 0x80	; 128
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <__divsf3_pse+0x56>
    1a16:	bb 0b       	sbc	r27, r27
    1a18:	80 2d       	mov	r24, r0
    1a1a:	bf 01       	movw	r22, r30
    1a1c:	ff 27       	eor	r31, r31
    1a1e:	93 58       	subi	r25, 0x83	; 131
    1a20:	5f 4f       	sbci	r21, 0xFF	; 255
    1a22:	3a f0       	brmi	.+14     	; 0x1a32 <__divsf3_pse+0x70>
    1a24:	9e 3f       	cpi	r25, 0xFE	; 254
    1a26:	51 05       	cpc	r21, r1
    1a28:	78 f0       	brcs	.+30     	; 0x1a48 <__divsf3_pse+0x86>
    1a2a:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_inf>
    1a2e:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__fp_szero>
    1a32:	5f 3f       	cpi	r21, 0xFF	; 255
    1a34:	e4 f3       	brlt	.-8      	; 0x1a2e <__divsf3_pse+0x6c>
    1a36:	98 3e       	cpi	r25, 0xE8	; 232
    1a38:	d4 f3       	brlt	.-12     	; 0x1a2e <__divsf3_pse+0x6c>
    1a3a:	86 95       	lsr	r24
    1a3c:	77 95       	ror	r23
    1a3e:	67 95       	ror	r22
    1a40:	b7 95       	ror	r27
    1a42:	f7 95       	ror	r31
    1a44:	9f 5f       	subi	r25, 0xFF	; 255
    1a46:	c9 f7       	brne	.-14     	; 0x1a3a <__divsf3_pse+0x78>
    1a48:	88 0f       	add	r24, r24
    1a4a:	91 1d       	adc	r25, r1
    1a4c:	96 95       	lsr	r25
    1a4e:	87 95       	ror	r24
    1a50:	97 f9       	bld	r25, 7
    1a52:	08 95       	ret
    1a54:	e1 e0       	ldi	r30, 0x01	; 1
    1a56:	66 0f       	add	r22, r22
    1a58:	77 1f       	adc	r23, r23
    1a5a:	88 1f       	adc	r24, r24
    1a5c:	bb 1f       	adc	r27, r27
    1a5e:	62 17       	cp	r22, r18
    1a60:	73 07       	cpc	r23, r19
    1a62:	84 07       	cpc	r24, r20
    1a64:	ba 07       	cpc	r27, r26
    1a66:	20 f0       	brcs	.+8      	; 0x1a70 <__divsf3_pse+0xae>
    1a68:	62 1b       	sub	r22, r18
    1a6a:	73 0b       	sbc	r23, r19
    1a6c:	84 0b       	sbc	r24, r20
    1a6e:	ba 0b       	sbc	r27, r26
    1a70:	ee 1f       	adc	r30, r30
    1a72:	88 f7       	brcc	.-30     	; 0x1a56 <__divsf3_pse+0x94>
    1a74:	e0 95       	com	r30
    1a76:	08 95       	ret

00001a78 <__fixunssfsi>:
    1a78:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__fp_splitA>
    1a7c:	88 f0       	brcs	.+34     	; 0x1aa0 <__fixunssfsi+0x28>
    1a7e:	9f 57       	subi	r25, 0x7F	; 127
    1a80:	98 f0       	brcs	.+38     	; 0x1aa8 <__fixunssfsi+0x30>
    1a82:	b9 2f       	mov	r27, r25
    1a84:	99 27       	eor	r25, r25
    1a86:	b7 51       	subi	r27, 0x17	; 23
    1a88:	b0 f0       	brcs	.+44     	; 0x1ab6 <__fixunssfsi+0x3e>
    1a8a:	e1 f0       	breq	.+56     	; 0x1ac4 <__fixunssfsi+0x4c>
    1a8c:	66 0f       	add	r22, r22
    1a8e:	77 1f       	adc	r23, r23
    1a90:	88 1f       	adc	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	1a f0       	brmi	.+6      	; 0x1a9c <__fixunssfsi+0x24>
    1a96:	ba 95       	dec	r27
    1a98:	c9 f7       	brne	.-14     	; 0x1a8c <__fixunssfsi+0x14>
    1a9a:	14 c0       	rjmp	.+40     	; 0x1ac4 <__fixunssfsi+0x4c>
    1a9c:	b1 30       	cpi	r27, 0x01	; 1
    1a9e:	91 f0       	breq	.+36     	; 0x1ac4 <__fixunssfsi+0x4c>
    1aa0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__fp_zero>
    1aa4:	b1 e0       	ldi	r27, 0x01	; 1
    1aa6:	08 95       	ret
    1aa8:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__fp_zero>
    1aac:	67 2f       	mov	r22, r23
    1aae:	78 2f       	mov	r23, r24
    1ab0:	88 27       	eor	r24, r24
    1ab2:	b8 5f       	subi	r27, 0xF8	; 248
    1ab4:	39 f0       	breq	.+14     	; 0x1ac4 <__fixunssfsi+0x4c>
    1ab6:	b9 3f       	cpi	r27, 0xF9	; 249
    1ab8:	cc f3       	brlt	.-14     	; 0x1aac <__fixunssfsi+0x34>
    1aba:	86 95       	lsr	r24
    1abc:	77 95       	ror	r23
    1abe:	67 95       	ror	r22
    1ac0:	b3 95       	inc	r27
    1ac2:	d9 f7       	brne	.-10     	; 0x1aba <__fixunssfsi+0x42>
    1ac4:	3e f4       	brtc	.+14     	; 0x1ad4 <__fixunssfsi+0x5c>
    1ac6:	90 95       	com	r25
    1ac8:	80 95       	com	r24
    1aca:	70 95       	com	r23
    1acc:	61 95       	neg	r22
    1ace:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad4:	08 95       	ret

00001ad6 <__floatunsisf>:
    1ad6:	e8 94       	clt
    1ad8:	09 c0       	rjmp	.+18     	; 0x1aec <__floatsisf+0x12>

00001ada <__floatsisf>:
    1ada:	97 fb       	bst	r25, 7
    1adc:	3e f4       	brtc	.+14     	; 0x1aec <__floatsisf+0x12>
    1ade:	90 95       	com	r25
    1ae0:	80 95       	com	r24
    1ae2:	70 95       	com	r23
    1ae4:	61 95       	neg	r22
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	99 23       	and	r25, r25
    1aee:	a9 f0       	breq	.+42     	; 0x1b1a <__floatsisf+0x40>
    1af0:	f9 2f       	mov	r31, r25
    1af2:	96 e9       	ldi	r25, 0x96	; 150
    1af4:	bb 27       	eor	r27, r27
    1af6:	93 95       	inc	r25
    1af8:	f6 95       	lsr	r31
    1afa:	87 95       	ror	r24
    1afc:	77 95       	ror	r23
    1afe:	67 95       	ror	r22
    1b00:	b7 95       	ror	r27
    1b02:	f1 11       	cpse	r31, r1
    1b04:	f8 cf       	rjmp	.-16     	; 0x1af6 <__floatsisf+0x1c>
    1b06:	fa f4       	brpl	.+62     	; 0x1b46 <__floatsisf+0x6c>
    1b08:	bb 0f       	add	r27, r27
    1b0a:	11 f4       	brne	.+4      	; 0x1b10 <__floatsisf+0x36>
    1b0c:	60 ff       	sbrs	r22, 0
    1b0e:	1b c0       	rjmp	.+54     	; 0x1b46 <__floatsisf+0x6c>
    1b10:	6f 5f       	subi	r22, 0xFF	; 255
    1b12:	7f 4f       	sbci	r23, 0xFF	; 255
    1b14:	8f 4f       	sbci	r24, 0xFF	; 255
    1b16:	9f 4f       	sbci	r25, 0xFF	; 255
    1b18:	16 c0       	rjmp	.+44     	; 0x1b46 <__floatsisf+0x6c>
    1b1a:	88 23       	and	r24, r24
    1b1c:	11 f0       	breq	.+4      	; 0x1b22 <__floatsisf+0x48>
    1b1e:	96 e9       	ldi	r25, 0x96	; 150
    1b20:	11 c0       	rjmp	.+34     	; 0x1b44 <__floatsisf+0x6a>
    1b22:	77 23       	and	r23, r23
    1b24:	21 f0       	breq	.+8      	; 0x1b2e <__floatsisf+0x54>
    1b26:	9e e8       	ldi	r25, 0x8E	; 142
    1b28:	87 2f       	mov	r24, r23
    1b2a:	76 2f       	mov	r23, r22
    1b2c:	05 c0       	rjmp	.+10     	; 0x1b38 <__floatsisf+0x5e>
    1b2e:	66 23       	and	r22, r22
    1b30:	71 f0       	breq	.+28     	; 0x1b4e <__floatsisf+0x74>
    1b32:	96 e8       	ldi	r25, 0x86	; 134
    1b34:	86 2f       	mov	r24, r22
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	2a f0       	brmi	.+10     	; 0x1b46 <__floatsisf+0x6c>
    1b3c:	9a 95       	dec	r25
    1b3e:	66 0f       	add	r22, r22
    1b40:	77 1f       	adc	r23, r23
    1b42:	88 1f       	adc	r24, r24
    1b44:	da f7       	brpl	.-10     	; 0x1b3c <__floatsisf+0x62>
    1b46:	88 0f       	add	r24, r24
    1b48:	96 95       	lsr	r25
    1b4a:	87 95       	ror	r24
    1b4c:	97 f9       	bld	r25, 7
    1b4e:	08 95       	ret

00001b50 <__fp_inf>:
    1b50:	97 f9       	bld	r25, 7
    1b52:	9f 67       	ori	r25, 0x7F	; 127
    1b54:	80 e8       	ldi	r24, 0x80	; 128
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	08 95       	ret

00001b5c <__fp_nan>:
    1b5c:	9f ef       	ldi	r25, 0xFF	; 255
    1b5e:	80 ec       	ldi	r24, 0xC0	; 192
    1b60:	08 95       	ret

00001b62 <__fp_pscA>:
    1b62:	00 24       	eor	r0, r0
    1b64:	0a 94       	dec	r0
    1b66:	16 16       	cp	r1, r22
    1b68:	17 06       	cpc	r1, r23
    1b6a:	18 06       	cpc	r1, r24
    1b6c:	09 06       	cpc	r0, r25
    1b6e:	08 95       	ret

00001b70 <__fp_pscB>:
    1b70:	00 24       	eor	r0, r0
    1b72:	0a 94       	dec	r0
    1b74:	12 16       	cp	r1, r18
    1b76:	13 06       	cpc	r1, r19
    1b78:	14 06       	cpc	r1, r20
    1b7a:	05 06       	cpc	r0, r21
    1b7c:	08 95       	ret

00001b7e <__fp_round>:
    1b7e:	09 2e       	mov	r0, r25
    1b80:	03 94       	inc	r0
    1b82:	00 0c       	add	r0, r0
    1b84:	11 f4       	brne	.+4      	; 0x1b8a <__fp_round+0xc>
    1b86:	88 23       	and	r24, r24
    1b88:	52 f0       	brmi	.+20     	; 0x1b9e <__fp_round+0x20>
    1b8a:	bb 0f       	add	r27, r27
    1b8c:	40 f4       	brcc	.+16     	; 0x1b9e <__fp_round+0x20>
    1b8e:	bf 2b       	or	r27, r31
    1b90:	11 f4       	brne	.+4      	; 0x1b96 <__fp_round+0x18>
    1b92:	60 ff       	sbrs	r22, 0
    1b94:	04 c0       	rjmp	.+8      	; 0x1b9e <__fp_round+0x20>
    1b96:	6f 5f       	subi	r22, 0xFF	; 255
    1b98:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9e:	08 95       	ret

00001ba0 <__fp_split3>:
    1ba0:	57 fd       	sbrc	r21, 7
    1ba2:	90 58       	subi	r25, 0x80	; 128
    1ba4:	44 0f       	add	r20, r20
    1ba6:	55 1f       	adc	r21, r21
    1ba8:	59 f0       	breq	.+22     	; 0x1bc0 <__fp_splitA+0x10>
    1baa:	5f 3f       	cpi	r21, 0xFF	; 255
    1bac:	71 f0       	breq	.+28     	; 0x1bca <__fp_splitA+0x1a>
    1bae:	47 95       	ror	r20

00001bb0 <__fp_splitA>:
    1bb0:	88 0f       	add	r24, r24
    1bb2:	97 fb       	bst	r25, 7
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	61 f0       	breq	.+24     	; 0x1bd0 <__fp_splitA+0x20>
    1bb8:	9f 3f       	cpi	r25, 0xFF	; 255
    1bba:	79 f0       	breq	.+30     	; 0x1bda <__fp_splitA+0x2a>
    1bbc:	87 95       	ror	r24
    1bbe:	08 95       	ret
    1bc0:	12 16       	cp	r1, r18
    1bc2:	13 06       	cpc	r1, r19
    1bc4:	14 06       	cpc	r1, r20
    1bc6:	55 1f       	adc	r21, r21
    1bc8:	f2 cf       	rjmp	.-28     	; 0x1bae <__fp_split3+0xe>
    1bca:	46 95       	lsr	r20
    1bcc:	f1 df       	rcall	.-30     	; 0x1bb0 <__fp_splitA>
    1bce:	08 c0       	rjmp	.+16     	; 0x1be0 <__fp_splitA+0x30>
    1bd0:	16 16       	cp	r1, r22
    1bd2:	17 06       	cpc	r1, r23
    1bd4:	18 06       	cpc	r1, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	f1 cf       	rjmp	.-30     	; 0x1bbc <__fp_splitA+0xc>
    1bda:	86 95       	lsr	r24
    1bdc:	71 05       	cpc	r23, r1
    1bde:	61 05       	cpc	r22, r1
    1be0:	08 94       	sec
    1be2:	08 95       	ret

00001be4 <__fp_zero>:
    1be4:	e8 94       	clt

00001be6 <__fp_szero>:
    1be6:	bb 27       	eor	r27, r27
    1be8:	66 27       	eor	r22, r22
    1bea:	77 27       	eor	r23, r23
    1bec:	cb 01       	movw	r24, r22
    1bee:	97 f9       	bld	r25, 7
    1bf0:	08 95       	ret

00001bf2 <__mulsf3>:
    1bf2:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__mulsf3x>
    1bf6:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_round>
    1bfa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fp_pscA>
    1bfe:	38 f0       	brcs	.+14     	; 0x1c0e <__mulsf3+0x1c>
    1c00:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__fp_pscB>
    1c04:	20 f0       	brcs	.+8      	; 0x1c0e <__mulsf3+0x1c>
    1c06:	95 23       	and	r25, r21
    1c08:	11 f0       	breq	.+4      	; 0x1c0e <__mulsf3+0x1c>
    1c0a:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_inf>
    1c0e:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__fp_nan>
    1c12:	11 24       	eor	r1, r1
    1c14:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__fp_szero>

00001c18 <__mulsf3x>:
    1c18:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__fp_split3>
    1c1c:	70 f3       	brcs	.-36     	; 0x1bfa <__mulsf3+0x8>

00001c1e <__mulsf3_pse>:
    1c1e:	95 9f       	mul	r25, r21
    1c20:	c1 f3       	breq	.-16     	; 0x1c12 <__mulsf3+0x20>
    1c22:	95 0f       	add	r25, r21
    1c24:	50 e0       	ldi	r21, 0x00	; 0
    1c26:	55 1f       	adc	r21, r21
    1c28:	62 9f       	mul	r22, r18
    1c2a:	f0 01       	movw	r30, r0
    1c2c:	72 9f       	mul	r23, r18
    1c2e:	bb 27       	eor	r27, r27
    1c30:	f0 0d       	add	r31, r0
    1c32:	b1 1d       	adc	r27, r1
    1c34:	63 9f       	mul	r22, r19
    1c36:	aa 27       	eor	r26, r26
    1c38:	f0 0d       	add	r31, r0
    1c3a:	b1 1d       	adc	r27, r1
    1c3c:	aa 1f       	adc	r26, r26
    1c3e:	64 9f       	mul	r22, r20
    1c40:	66 27       	eor	r22, r22
    1c42:	b0 0d       	add	r27, r0
    1c44:	a1 1d       	adc	r26, r1
    1c46:	66 1f       	adc	r22, r22
    1c48:	82 9f       	mul	r24, r18
    1c4a:	22 27       	eor	r18, r18
    1c4c:	b0 0d       	add	r27, r0
    1c4e:	a1 1d       	adc	r26, r1
    1c50:	62 1f       	adc	r22, r18
    1c52:	73 9f       	mul	r23, r19
    1c54:	b0 0d       	add	r27, r0
    1c56:	a1 1d       	adc	r26, r1
    1c58:	62 1f       	adc	r22, r18
    1c5a:	83 9f       	mul	r24, r19
    1c5c:	a0 0d       	add	r26, r0
    1c5e:	61 1d       	adc	r22, r1
    1c60:	22 1f       	adc	r18, r18
    1c62:	74 9f       	mul	r23, r20
    1c64:	33 27       	eor	r19, r19
    1c66:	a0 0d       	add	r26, r0
    1c68:	61 1d       	adc	r22, r1
    1c6a:	23 1f       	adc	r18, r19
    1c6c:	84 9f       	mul	r24, r20
    1c6e:	60 0d       	add	r22, r0
    1c70:	21 1d       	adc	r18, r1
    1c72:	82 2f       	mov	r24, r18
    1c74:	76 2f       	mov	r23, r22
    1c76:	6a 2f       	mov	r22, r26
    1c78:	11 24       	eor	r1, r1
    1c7a:	9f 57       	subi	r25, 0x7F	; 127
    1c7c:	50 40       	sbci	r21, 0x00	; 0
    1c7e:	9a f0       	brmi	.+38     	; 0x1ca6 <__mulsf3_pse+0x88>
    1c80:	f1 f0       	breq	.+60     	; 0x1cbe <__mulsf3_pse+0xa0>
    1c82:	88 23       	and	r24, r24
    1c84:	4a f0       	brmi	.+18     	; 0x1c98 <__mulsf3_pse+0x7a>
    1c86:	ee 0f       	add	r30, r30
    1c88:	ff 1f       	adc	r31, r31
    1c8a:	bb 1f       	adc	r27, r27
    1c8c:	66 1f       	adc	r22, r22
    1c8e:	77 1f       	adc	r23, r23
    1c90:	88 1f       	adc	r24, r24
    1c92:	91 50       	subi	r25, 0x01	; 1
    1c94:	50 40       	sbci	r21, 0x00	; 0
    1c96:	a9 f7       	brne	.-22     	; 0x1c82 <__mulsf3_pse+0x64>
    1c98:	9e 3f       	cpi	r25, 0xFE	; 254
    1c9a:	51 05       	cpc	r21, r1
    1c9c:	80 f0       	brcs	.+32     	; 0x1cbe <__mulsf3_pse+0xa0>
    1c9e:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_inf>
    1ca2:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__fp_szero>
    1ca6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ca8:	e4 f3       	brlt	.-8      	; 0x1ca2 <__mulsf3_pse+0x84>
    1caa:	98 3e       	cpi	r25, 0xE8	; 232
    1cac:	d4 f3       	brlt	.-12     	; 0x1ca2 <__mulsf3_pse+0x84>
    1cae:	86 95       	lsr	r24
    1cb0:	77 95       	ror	r23
    1cb2:	67 95       	ror	r22
    1cb4:	b7 95       	ror	r27
    1cb6:	f7 95       	ror	r31
    1cb8:	e7 95       	ror	r30
    1cba:	9f 5f       	subi	r25, 0xFF	; 255
    1cbc:	c1 f7       	brne	.-16     	; 0x1cae <__mulsf3_pse+0x90>
    1cbe:	fe 2b       	or	r31, r30
    1cc0:	88 0f       	add	r24, r24
    1cc2:	91 1d       	adc	r25, r1
    1cc4:	96 95       	lsr	r25
    1cc6:	87 95       	ror	r24
    1cc8:	97 f9       	bld	r25, 7
    1cca:	08 95       	ret

00001ccc <__udivmodhi4>:
    1ccc:	aa 1b       	sub	r26, r26
    1cce:	bb 1b       	sub	r27, r27
    1cd0:	51 e1       	ldi	r21, 0x11	; 17
    1cd2:	07 c0       	rjmp	.+14     	; 0x1ce2 <__udivmodhi4_ep>

00001cd4 <__udivmodhi4_loop>:
    1cd4:	aa 1f       	adc	r26, r26
    1cd6:	bb 1f       	adc	r27, r27
    1cd8:	a6 17       	cp	r26, r22
    1cda:	b7 07       	cpc	r27, r23
    1cdc:	10 f0       	brcs	.+4      	; 0x1ce2 <__udivmodhi4_ep>
    1cde:	a6 1b       	sub	r26, r22
    1ce0:	b7 0b       	sbc	r27, r23

00001ce2 <__udivmodhi4_ep>:
    1ce2:	88 1f       	adc	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	5a 95       	dec	r21
    1ce8:	a9 f7       	brne	.-22     	; 0x1cd4 <__udivmodhi4_loop>
    1cea:	80 95       	com	r24
    1cec:	90 95       	com	r25
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	08 95       	ret

00001cf4 <__udivmodsi4>:
    1cf4:	a1 e2       	ldi	r26, 0x21	; 33
    1cf6:	1a 2e       	mov	r1, r26
    1cf8:	aa 1b       	sub	r26, r26
    1cfa:	bb 1b       	sub	r27, r27
    1cfc:	fd 01       	movw	r30, r26
    1cfe:	0d c0       	rjmp	.+26     	; 0x1d1a <__udivmodsi4_ep>

00001d00 <__udivmodsi4_loop>:
    1d00:	aa 1f       	adc	r26, r26
    1d02:	bb 1f       	adc	r27, r27
    1d04:	ee 1f       	adc	r30, r30
    1d06:	ff 1f       	adc	r31, r31
    1d08:	a2 17       	cp	r26, r18
    1d0a:	b3 07       	cpc	r27, r19
    1d0c:	e4 07       	cpc	r30, r20
    1d0e:	f5 07       	cpc	r31, r21
    1d10:	20 f0       	brcs	.+8      	; 0x1d1a <__udivmodsi4_ep>
    1d12:	a2 1b       	sub	r26, r18
    1d14:	b3 0b       	sbc	r27, r19
    1d16:	e4 0b       	sbc	r30, r20
    1d18:	f5 0b       	sbc	r31, r21

00001d1a <__udivmodsi4_ep>:
    1d1a:	66 1f       	adc	r22, r22
    1d1c:	77 1f       	adc	r23, r23
    1d1e:	88 1f       	adc	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	1a 94       	dec	r1
    1d24:	69 f7       	brne	.-38     	; 0x1d00 <__udivmodsi4_loop>
    1d26:	60 95       	com	r22
    1d28:	70 95       	com	r23
    1d2a:	80 95       	com	r24
    1d2c:	90 95       	com	r25
    1d2e:	9b 01       	movw	r18, r22
    1d30:	ac 01       	movw	r20, r24
    1d32:	bd 01       	movw	r22, r26
    1d34:	cf 01       	movw	r24, r30
    1d36:	08 95       	ret

00001d38 <__umulhisi3>:
    1d38:	a2 9f       	mul	r26, r18
    1d3a:	b0 01       	movw	r22, r0
    1d3c:	b3 9f       	mul	r27, r19
    1d3e:	c0 01       	movw	r24, r0
    1d40:	a3 9f       	mul	r26, r19
    1d42:	70 0d       	add	r23, r0
    1d44:	81 1d       	adc	r24, r1
    1d46:	11 24       	eor	r1, r1
    1d48:	91 1d       	adc	r25, r1
    1d4a:	b2 9f       	mul	r27, r18
    1d4c:	70 0d       	add	r23, r0
    1d4e:	81 1d       	adc	r24, r1
    1d50:	11 24       	eor	r1, r1
    1d52:	91 1d       	adc	r25, r1
    1d54:	08 95       	ret

00001d56 <sprintf>:
    1d56:	ae e0       	ldi	r26, 0x0E	; 14
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e1 eb       	ldi	r30, 0xB1	; 177
    1d5c:	fe e0       	ldi	r31, 0x0E	; 14
    1d5e:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <__prologue_saves__+0x1c>
    1d62:	0d 89       	ldd	r16, Y+21	; 0x15
    1d64:	1e 89       	ldd	r17, Y+22	; 0x16
    1d66:	86 e0       	ldi	r24, 0x06	; 6
    1d68:	8c 83       	std	Y+4, r24	; 0x04
    1d6a:	1a 83       	std	Y+2, r17	; 0x02
    1d6c:	09 83       	std	Y+1, r16	; 0x01
    1d6e:	8f ef       	ldi	r24, 0xFF	; 255
    1d70:	9f e7       	ldi	r25, 0x7F	; 127
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	8d 83       	std	Y+5, r24	; 0x05
    1d76:	ae 01       	movw	r20, r28
    1d78:	47 5e       	subi	r20, 0xE7	; 231
    1d7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7c:	6f 89       	ldd	r22, Y+23	; 0x17
    1d7e:	78 8d       	ldd	r23, Y+24	; 0x18
    1d80:	ce 01       	movw	r24, r28
    1d82:	01 96       	adiw	r24, 0x01	; 1
    1d84:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <vfprintf>
    1d88:	ef 81       	ldd	r30, Y+7	; 0x07
    1d8a:	f8 85       	ldd	r31, Y+8	; 0x08
    1d8c:	e0 0f       	add	r30, r16
    1d8e:	f1 1f       	adc	r31, r17
    1d90:	10 82       	st	Z, r1
    1d92:	2e 96       	adiw	r28, 0x0e	; 14
    1d94:	e4 e0       	ldi	r30, 0x04	; 4
    1d96:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__epilogue_restores__+0x1c>

00001d9a <vfprintf>:
    1d9a:	ab e0       	ldi	r26, 0x0B	; 11
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e3 ed       	ldi	r30, 0xD3	; 211
    1da0:	fe e0       	ldi	r31, 0x0E	; 14
    1da2:	0c 94 95 11 	jmp	0x232a	; 0x232a <__prologue_saves__>
    1da6:	6c 01       	movw	r12, r24
    1da8:	7b 01       	movw	r14, r22
    1daa:	8a 01       	movw	r16, r20
    1dac:	fc 01       	movw	r30, r24
    1dae:	17 82       	std	Z+7, r1	; 0x07
    1db0:	16 82       	std	Z+6, r1	; 0x06
    1db2:	83 81       	ldd	r24, Z+3	; 0x03
    1db4:	81 ff       	sbrs	r24, 1
    1db6:	cc c1       	rjmp	.+920    	; 0x2150 <vfprintf+0x3b6>
    1db8:	ce 01       	movw	r24, r28
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	3c 01       	movw	r6, r24
    1dbe:	f6 01       	movw	r30, r12
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	f7 01       	movw	r30, r14
    1dc4:	93 fd       	sbrc	r25, 3
    1dc6:	85 91       	lpm	r24, Z+
    1dc8:	93 ff       	sbrs	r25, 3
    1dca:	81 91       	ld	r24, Z+
    1dcc:	7f 01       	movw	r14, r30
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <vfprintf+0x3a>
    1dd2:	ba c1       	rjmp	.+884    	; 0x2148 <vfprintf+0x3ae>
    1dd4:	85 32       	cpi	r24, 0x25	; 37
    1dd6:	39 f4       	brne	.+14     	; 0x1de6 <vfprintf+0x4c>
    1dd8:	93 fd       	sbrc	r25, 3
    1dda:	85 91       	lpm	r24, Z+
    1ddc:	93 ff       	sbrs	r25, 3
    1dde:	81 91       	ld	r24, Z+
    1de0:	7f 01       	movw	r14, r30
    1de2:	85 32       	cpi	r24, 0x25	; 37
    1de4:	29 f4       	brne	.+10     	; 0x1df0 <vfprintf+0x56>
    1de6:	b6 01       	movw	r22, r12
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	0e 94 c4 10 	call	0x2188	; 0x2188 <fputc>
    1dee:	e7 cf       	rjmp	.-50     	; 0x1dbe <vfprintf+0x24>
    1df0:	91 2c       	mov	r9, r1
    1df2:	21 2c       	mov	r2, r1
    1df4:	31 2c       	mov	r3, r1
    1df6:	ff e1       	ldi	r31, 0x1F	; 31
    1df8:	f3 15       	cp	r31, r3
    1dfa:	d8 f0       	brcs	.+54     	; 0x1e32 <vfprintf+0x98>
    1dfc:	8b 32       	cpi	r24, 0x2B	; 43
    1dfe:	79 f0       	breq	.+30     	; 0x1e1e <vfprintf+0x84>
    1e00:	38 f4       	brcc	.+14     	; 0x1e10 <vfprintf+0x76>
    1e02:	80 32       	cpi	r24, 0x20	; 32
    1e04:	79 f0       	breq	.+30     	; 0x1e24 <vfprintf+0x8a>
    1e06:	83 32       	cpi	r24, 0x23	; 35
    1e08:	a1 f4       	brne	.+40     	; 0x1e32 <vfprintf+0x98>
    1e0a:	23 2d       	mov	r18, r3
    1e0c:	20 61       	ori	r18, 0x10	; 16
    1e0e:	1d c0       	rjmp	.+58     	; 0x1e4a <vfprintf+0xb0>
    1e10:	8d 32       	cpi	r24, 0x2D	; 45
    1e12:	61 f0       	breq	.+24     	; 0x1e2c <vfprintf+0x92>
    1e14:	80 33       	cpi	r24, 0x30	; 48
    1e16:	69 f4       	brne	.+26     	; 0x1e32 <vfprintf+0x98>
    1e18:	23 2d       	mov	r18, r3
    1e1a:	21 60       	ori	r18, 0x01	; 1
    1e1c:	16 c0       	rjmp	.+44     	; 0x1e4a <vfprintf+0xb0>
    1e1e:	83 2d       	mov	r24, r3
    1e20:	82 60       	ori	r24, 0x02	; 2
    1e22:	38 2e       	mov	r3, r24
    1e24:	e3 2d       	mov	r30, r3
    1e26:	e4 60       	ori	r30, 0x04	; 4
    1e28:	3e 2e       	mov	r3, r30
    1e2a:	2a c0       	rjmp	.+84     	; 0x1e80 <vfprintf+0xe6>
    1e2c:	f3 2d       	mov	r31, r3
    1e2e:	f8 60       	ori	r31, 0x08	; 8
    1e30:	1d c0       	rjmp	.+58     	; 0x1e6c <vfprintf+0xd2>
    1e32:	37 fc       	sbrc	r3, 7
    1e34:	2d c0       	rjmp	.+90     	; 0x1e90 <vfprintf+0xf6>
    1e36:	20 ed       	ldi	r18, 0xD0	; 208
    1e38:	28 0f       	add	r18, r24
    1e3a:	2a 30       	cpi	r18, 0x0A	; 10
    1e3c:	40 f0       	brcs	.+16     	; 0x1e4e <vfprintf+0xb4>
    1e3e:	8e 32       	cpi	r24, 0x2E	; 46
    1e40:	b9 f4       	brne	.+46     	; 0x1e70 <vfprintf+0xd6>
    1e42:	36 fc       	sbrc	r3, 6
    1e44:	81 c1       	rjmp	.+770    	; 0x2148 <vfprintf+0x3ae>
    1e46:	23 2d       	mov	r18, r3
    1e48:	20 64       	ori	r18, 0x40	; 64
    1e4a:	32 2e       	mov	r3, r18
    1e4c:	19 c0       	rjmp	.+50     	; 0x1e80 <vfprintf+0xe6>
    1e4e:	36 fe       	sbrs	r3, 6
    1e50:	06 c0       	rjmp	.+12     	; 0x1e5e <vfprintf+0xc4>
    1e52:	8a e0       	ldi	r24, 0x0A	; 10
    1e54:	98 9e       	mul	r9, r24
    1e56:	20 0d       	add	r18, r0
    1e58:	11 24       	eor	r1, r1
    1e5a:	92 2e       	mov	r9, r18
    1e5c:	11 c0       	rjmp	.+34     	; 0x1e80 <vfprintf+0xe6>
    1e5e:	ea e0       	ldi	r30, 0x0A	; 10
    1e60:	2e 9e       	mul	r2, r30
    1e62:	20 0d       	add	r18, r0
    1e64:	11 24       	eor	r1, r1
    1e66:	22 2e       	mov	r2, r18
    1e68:	f3 2d       	mov	r31, r3
    1e6a:	f0 62       	ori	r31, 0x20	; 32
    1e6c:	3f 2e       	mov	r3, r31
    1e6e:	08 c0       	rjmp	.+16     	; 0x1e80 <vfprintf+0xe6>
    1e70:	8c 36       	cpi	r24, 0x6C	; 108
    1e72:	21 f4       	brne	.+8      	; 0x1e7c <vfprintf+0xe2>
    1e74:	83 2d       	mov	r24, r3
    1e76:	80 68       	ori	r24, 0x80	; 128
    1e78:	38 2e       	mov	r3, r24
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <vfprintf+0xe6>
    1e7c:	88 36       	cpi	r24, 0x68	; 104
    1e7e:	41 f4       	brne	.+16     	; 0x1e90 <vfprintf+0xf6>
    1e80:	f7 01       	movw	r30, r14
    1e82:	93 fd       	sbrc	r25, 3
    1e84:	85 91       	lpm	r24, Z+
    1e86:	93 ff       	sbrs	r25, 3
    1e88:	81 91       	ld	r24, Z+
    1e8a:	7f 01       	movw	r14, r30
    1e8c:	81 11       	cpse	r24, r1
    1e8e:	b3 cf       	rjmp	.-154    	; 0x1df6 <vfprintf+0x5c>
    1e90:	98 2f       	mov	r25, r24
    1e92:	9f 7d       	andi	r25, 0xDF	; 223
    1e94:	95 54       	subi	r25, 0x45	; 69
    1e96:	93 30       	cpi	r25, 0x03	; 3
    1e98:	28 f4       	brcc	.+10     	; 0x1ea4 <vfprintf+0x10a>
    1e9a:	0c 5f       	subi	r16, 0xFC	; 252
    1e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9e:	9f e3       	ldi	r25, 0x3F	; 63
    1ea0:	99 83       	std	Y+1, r25	; 0x01
    1ea2:	0d c0       	rjmp	.+26     	; 0x1ebe <vfprintf+0x124>
    1ea4:	83 36       	cpi	r24, 0x63	; 99
    1ea6:	31 f0       	breq	.+12     	; 0x1eb4 <vfprintf+0x11a>
    1ea8:	83 37       	cpi	r24, 0x73	; 115
    1eaa:	71 f0       	breq	.+28     	; 0x1ec8 <vfprintf+0x12e>
    1eac:	83 35       	cpi	r24, 0x53	; 83
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <vfprintf+0x118>
    1eb0:	59 c0       	rjmp	.+178    	; 0x1f64 <vfprintf+0x1ca>
    1eb2:	21 c0       	rjmp	.+66     	; 0x1ef6 <vfprintf+0x15c>
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	80 81       	ld	r24, Z
    1eb8:	89 83       	std	Y+1, r24	; 0x01
    1eba:	0e 5f       	subi	r16, 0xFE	; 254
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	88 24       	eor	r8, r8
    1ec0:	83 94       	inc	r8
    1ec2:	91 2c       	mov	r9, r1
    1ec4:	53 01       	movw	r10, r6
    1ec6:	13 c0       	rjmp	.+38     	; 0x1eee <vfprintf+0x154>
    1ec8:	28 01       	movw	r4, r16
    1eca:	f2 e0       	ldi	r31, 0x02	; 2
    1ecc:	4f 0e       	add	r4, r31
    1ece:	51 1c       	adc	r5, r1
    1ed0:	f8 01       	movw	r30, r16
    1ed2:	a0 80       	ld	r10, Z
    1ed4:	b1 80       	ldd	r11, Z+1	; 0x01
    1ed6:	36 fe       	sbrs	r3, 6
    1ed8:	03 c0       	rjmp	.+6      	; 0x1ee0 <vfprintf+0x146>
    1eda:	69 2d       	mov	r22, r9
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <vfprintf+0x14a>
    1ee0:	6f ef       	ldi	r22, 0xFF	; 255
    1ee2:	7f ef       	ldi	r23, 0xFF	; 255
    1ee4:	c5 01       	movw	r24, r10
    1ee6:	0e 94 b9 10 	call	0x2172	; 0x2172 <strnlen>
    1eea:	4c 01       	movw	r8, r24
    1eec:	82 01       	movw	r16, r4
    1eee:	f3 2d       	mov	r31, r3
    1ef0:	ff 77       	andi	r31, 0x7F	; 127
    1ef2:	3f 2e       	mov	r3, r31
    1ef4:	16 c0       	rjmp	.+44     	; 0x1f22 <vfprintf+0x188>
    1ef6:	28 01       	movw	r4, r16
    1ef8:	22 e0       	ldi	r18, 0x02	; 2
    1efa:	42 0e       	add	r4, r18
    1efc:	51 1c       	adc	r5, r1
    1efe:	f8 01       	movw	r30, r16
    1f00:	a0 80       	ld	r10, Z
    1f02:	b1 80       	ldd	r11, Z+1	; 0x01
    1f04:	36 fe       	sbrs	r3, 6
    1f06:	03 c0       	rjmp	.+6      	; 0x1f0e <vfprintf+0x174>
    1f08:	69 2d       	mov	r22, r9
    1f0a:	70 e0       	ldi	r23, 0x00	; 0
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <vfprintf+0x178>
    1f0e:	6f ef       	ldi	r22, 0xFF	; 255
    1f10:	7f ef       	ldi	r23, 0xFF	; 255
    1f12:	c5 01       	movw	r24, r10
    1f14:	0e 94 ae 10 	call	0x215c	; 0x215c <strnlen_P>
    1f18:	4c 01       	movw	r8, r24
    1f1a:	f3 2d       	mov	r31, r3
    1f1c:	f0 68       	ori	r31, 0x80	; 128
    1f1e:	3f 2e       	mov	r3, r31
    1f20:	82 01       	movw	r16, r4
    1f22:	33 fc       	sbrc	r3, 3
    1f24:	1b c0       	rjmp	.+54     	; 0x1f5c <vfprintf+0x1c2>
    1f26:	82 2d       	mov	r24, r2
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	88 16       	cp	r8, r24
    1f2c:	99 06       	cpc	r9, r25
    1f2e:	b0 f4       	brcc	.+44     	; 0x1f5c <vfprintf+0x1c2>
    1f30:	b6 01       	movw	r22, r12
    1f32:	80 e2       	ldi	r24, 0x20	; 32
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 c4 10 	call	0x2188	; 0x2188 <fputc>
    1f3a:	2a 94       	dec	r2
    1f3c:	f4 cf       	rjmp	.-24     	; 0x1f26 <vfprintf+0x18c>
    1f3e:	f5 01       	movw	r30, r10
    1f40:	37 fc       	sbrc	r3, 7
    1f42:	85 91       	lpm	r24, Z+
    1f44:	37 fe       	sbrs	r3, 7
    1f46:	81 91       	ld	r24, Z+
    1f48:	5f 01       	movw	r10, r30
    1f4a:	b6 01       	movw	r22, r12
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	0e 94 c4 10 	call	0x2188	; 0x2188 <fputc>
    1f52:	21 10       	cpse	r2, r1
    1f54:	2a 94       	dec	r2
    1f56:	21 e0       	ldi	r18, 0x01	; 1
    1f58:	82 1a       	sub	r8, r18
    1f5a:	91 08       	sbc	r9, r1
    1f5c:	81 14       	cp	r8, r1
    1f5e:	91 04       	cpc	r9, r1
    1f60:	71 f7       	brne	.-36     	; 0x1f3e <vfprintf+0x1a4>
    1f62:	e8 c0       	rjmp	.+464    	; 0x2134 <vfprintf+0x39a>
    1f64:	84 36       	cpi	r24, 0x64	; 100
    1f66:	11 f0       	breq	.+4      	; 0x1f6c <vfprintf+0x1d2>
    1f68:	89 36       	cpi	r24, 0x69	; 105
    1f6a:	41 f5       	brne	.+80     	; 0x1fbc <vfprintf+0x222>
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	37 fe       	sbrs	r3, 7
    1f70:	07 c0       	rjmp	.+14     	; 0x1f80 <vfprintf+0x1e6>
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	93 81       	ldd	r25, Z+3	; 0x03
    1f7a:	0c 5f       	subi	r16, 0xFC	; 252
    1f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7e:	08 c0       	rjmp	.+16     	; 0x1f90 <vfprintf+0x1f6>
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	07 2e       	mov	r0, r23
    1f86:	00 0c       	add	r0, r0
    1f88:	88 0b       	sbc	r24, r24
    1f8a:	99 0b       	sbc	r25, r25
    1f8c:	0e 5f       	subi	r16, 0xFE	; 254
    1f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f90:	f3 2d       	mov	r31, r3
    1f92:	ff 76       	andi	r31, 0x6F	; 111
    1f94:	3f 2e       	mov	r3, r31
    1f96:	97 ff       	sbrs	r25, 7
    1f98:	09 c0       	rjmp	.+18     	; 0x1fac <vfprintf+0x212>
    1f9a:	90 95       	com	r25
    1f9c:	80 95       	com	r24
    1f9e:	70 95       	com	r23
    1fa0:	61 95       	neg	r22
    1fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa8:	f0 68       	ori	r31, 0x80	; 128
    1faa:	3f 2e       	mov	r3, r31
    1fac:	2a e0       	ldi	r18, 0x0A	; 10
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	a3 01       	movw	r20, r6
    1fb2:	0e 94 00 11 	call	0x2200	; 0x2200 <__ultoa_invert>
    1fb6:	88 2e       	mov	r8, r24
    1fb8:	86 18       	sub	r8, r6
    1fba:	45 c0       	rjmp	.+138    	; 0x2046 <vfprintf+0x2ac>
    1fbc:	85 37       	cpi	r24, 0x75	; 117
    1fbe:	31 f4       	brne	.+12     	; 0x1fcc <vfprintf+0x232>
    1fc0:	23 2d       	mov	r18, r3
    1fc2:	2f 7e       	andi	r18, 0xEF	; 239
    1fc4:	b2 2e       	mov	r11, r18
    1fc6:	2a e0       	ldi	r18, 0x0A	; 10
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	25 c0       	rjmp	.+74     	; 0x2016 <vfprintf+0x27c>
    1fcc:	93 2d       	mov	r25, r3
    1fce:	99 7f       	andi	r25, 0xF9	; 249
    1fd0:	b9 2e       	mov	r11, r25
    1fd2:	8f 36       	cpi	r24, 0x6F	; 111
    1fd4:	c1 f0       	breq	.+48     	; 0x2006 <vfprintf+0x26c>
    1fd6:	18 f4       	brcc	.+6      	; 0x1fde <vfprintf+0x244>
    1fd8:	88 35       	cpi	r24, 0x58	; 88
    1fda:	79 f0       	breq	.+30     	; 0x1ffa <vfprintf+0x260>
    1fdc:	b5 c0       	rjmp	.+362    	; 0x2148 <vfprintf+0x3ae>
    1fde:	80 37       	cpi	r24, 0x70	; 112
    1fe0:	19 f0       	breq	.+6      	; 0x1fe8 <vfprintf+0x24e>
    1fe2:	88 37       	cpi	r24, 0x78	; 120
    1fe4:	21 f0       	breq	.+8      	; 0x1fee <vfprintf+0x254>
    1fe6:	b0 c0       	rjmp	.+352    	; 0x2148 <vfprintf+0x3ae>
    1fe8:	e9 2f       	mov	r30, r25
    1fea:	e0 61       	ori	r30, 0x10	; 16
    1fec:	be 2e       	mov	r11, r30
    1fee:	b4 fe       	sbrs	r11, 4
    1ff0:	0d c0       	rjmp	.+26     	; 0x200c <vfprintf+0x272>
    1ff2:	fb 2d       	mov	r31, r11
    1ff4:	f4 60       	ori	r31, 0x04	; 4
    1ff6:	bf 2e       	mov	r11, r31
    1ff8:	09 c0       	rjmp	.+18     	; 0x200c <vfprintf+0x272>
    1ffa:	34 fe       	sbrs	r3, 4
    1ffc:	0a c0       	rjmp	.+20     	; 0x2012 <vfprintf+0x278>
    1ffe:	29 2f       	mov	r18, r25
    2000:	26 60       	ori	r18, 0x06	; 6
    2002:	b2 2e       	mov	r11, r18
    2004:	06 c0       	rjmp	.+12     	; 0x2012 <vfprintf+0x278>
    2006:	28 e0       	ldi	r18, 0x08	; 8
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	05 c0       	rjmp	.+10     	; 0x2016 <vfprintf+0x27c>
    200c:	20 e1       	ldi	r18, 0x10	; 16
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <vfprintf+0x27c>
    2012:	20 e1       	ldi	r18, 0x10	; 16
    2014:	32 e0       	ldi	r19, 0x02	; 2
    2016:	f8 01       	movw	r30, r16
    2018:	b7 fe       	sbrs	r11, 7
    201a:	07 c0       	rjmp	.+14     	; 0x202a <vfprintf+0x290>
    201c:	60 81       	ld	r22, Z
    201e:	71 81       	ldd	r23, Z+1	; 0x01
    2020:	82 81       	ldd	r24, Z+2	; 0x02
    2022:	93 81       	ldd	r25, Z+3	; 0x03
    2024:	0c 5f       	subi	r16, 0xFC	; 252
    2026:	1f 4f       	sbci	r17, 0xFF	; 255
    2028:	06 c0       	rjmp	.+12     	; 0x2036 <vfprintf+0x29c>
    202a:	60 81       	ld	r22, Z
    202c:	71 81       	ldd	r23, Z+1	; 0x01
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0e 5f       	subi	r16, 0xFE	; 254
    2034:	1f 4f       	sbci	r17, 0xFF	; 255
    2036:	a3 01       	movw	r20, r6
    2038:	0e 94 00 11 	call	0x2200	; 0x2200 <__ultoa_invert>
    203c:	88 2e       	mov	r8, r24
    203e:	86 18       	sub	r8, r6
    2040:	fb 2d       	mov	r31, r11
    2042:	ff 77       	andi	r31, 0x7F	; 127
    2044:	3f 2e       	mov	r3, r31
    2046:	36 fe       	sbrs	r3, 6
    2048:	0d c0       	rjmp	.+26     	; 0x2064 <vfprintf+0x2ca>
    204a:	23 2d       	mov	r18, r3
    204c:	2e 7f       	andi	r18, 0xFE	; 254
    204e:	a2 2e       	mov	r10, r18
    2050:	89 14       	cp	r8, r9
    2052:	58 f4       	brcc	.+22     	; 0x206a <vfprintf+0x2d0>
    2054:	34 fe       	sbrs	r3, 4
    2056:	0b c0       	rjmp	.+22     	; 0x206e <vfprintf+0x2d4>
    2058:	32 fc       	sbrc	r3, 2
    205a:	09 c0       	rjmp	.+18     	; 0x206e <vfprintf+0x2d4>
    205c:	83 2d       	mov	r24, r3
    205e:	8e 7e       	andi	r24, 0xEE	; 238
    2060:	a8 2e       	mov	r10, r24
    2062:	05 c0       	rjmp	.+10     	; 0x206e <vfprintf+0x2d4>
    2064:	b8 2c       	mov	r11, r8
    2066:	a3 2c       	mov	r10, r3
    2068:	03 c0       	rjmp	.+6      	; 0x2070 <vfprintf+0x2d6>
    206a:	b8 2c       	mov	r11, r8
    206c:	01 c0       	rjmp	.+2      	; 0x2070 <vfprintf+0x2d6>
    206e:	b9 2c       	mov	r11, r9
    2070:	a4 fe       	sbrs	r10, 4
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <vfprintf+0x2f8>
    2074:	fe 01       	movw	r30, r28
    2076:	e8 0d       	add	r30, r8
    2078:	f1 1d       	adc	r31, r1
    207a:	80 81       	ld	r24, Z
    207c:	80 33       	cpi	r24, 0x30	; 48
    207e:	21 f4       	brne	.+8      	; 0x2088 <vfprintf+0x2ee>
    2080:	9a 2d       	mov	r25, r10
    2082:	99 7e       	andi	r25, 0xE9	; 233
    2084:	a9 2e       	mov	r10, r25
    2086:	09 c0       	rjmp	.+18     	; 0x209a <vfprintf+0x300>
    2088:	a2 fe       	sbrs	r10, 2
    208a:	06 c0       	rjmp	.+12     	; 0x2098 <vfprintf+0x2fe>
    208c:	b3 94       	inc	r11
    208e:	b3 94       	inc	r11
    2090:	04 c0       	rjmp	.+8      	; 0x209a <vfprintf+0x300>
    2092:	8a 2d       	mov	r24, r10
    2094:	86 78       	andi	r24, 0x86	; 134
    2096:	09 f0       	breq	.+2      	; 0x209a <vfprintf+0x300>
    2098:	b3 94       	inc	r11
    209a:	a3 fc       	sbrc	r10, 3
    209c:	11 c0       	rjmp	.+34     	; 0x20c0 <vfprintf+0x326>
    209e:	a0 fe       	sbrs	r10, 0
    20a0:	06 c0       	rjmp	.+12     	; 0x20ae <vfprintf+0x314>
    20a2:	b2 14       	cp	r11, r2
    20a4:	88 f4       	brcc	.+34     	; 0x20c8 <vfprintf+0x32e>
    20a6:	28 0c       	add	r2, r8
    20a8:	92 2c       	mov	r9, r2
    20aa:	9b 18       	sub	r9, r11
    20ac:	0e c0       	rjmp	.+28     	; 0x20ca <vfprintf+0x330>
    20ae:	b2 14       	cp	r11, r2
    20b0:	60 f4       	brcc	.+24     	; 0x20ca <vfprintf+0x330>
    20b2:	b6 01       	movw	r22, r12
    20b4:	80 e2       	ldi	r24, 0x20	; 32
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	0e 94 c4 10 	call	0x2188	; 0x2188 <fputc>
    20bc:	b3 94       	inc	r11
    20be:	f7 cf       	rjmp	.-18     	; 0x20ae <vfprintf+0x314>
    20c0:	b2 14       	cp	r11, r2
    20c2:	18 f4       	brcc	.+6      	; 0x20ca <vfprintf+0x330>
    20c4:	2b 18       	sub	r2, r11
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <vfprintf+0x332>
    20c8:	98 2c       	mov	r9, r8
    20ca:	21 2c       	mov	r2, r1
    20cc:	a4 fe       	sbrs	r10, 4
    20ce:	10 c0       	rjmp	.+32     	; 0x20f0 <vfprintf+0x356>
    20d0:	b6 01       	movw	r22, r12
    20d2:	80 e3       	ldi	r24, 0x30	; 48
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	0e 94 c4 10 	call	0x2188	; 0x2188 <fputc>
    20da:	a2 fe       	sbrs	r10, 2
    20dc:	17 c0       	rjmp	.+46     	; 0x210c <vfprintf+0x372>
    20de:	a1 fc       	sbrc	r10, 1
    20e0:	03 c0       	rjmp	.+6      	; 0x20e8 <vfprintf+0x34e>
    20e2:	88 e7       	ldi	r24, 0x78	; 120
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <vfprintf+0x352>
    20e8:	88 e5       	ldi	r24, 0x58	; 88
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	b6 01       	movw	r22, r12
    20ee:	0c c0       	rjmp	.+24     	; 0x2108 <vfprintf+0x36e>
    20f0:	8a 2d       	mov	r24, r10
    20f2:	86 78       	andi	r24, 0x86	; 134
    20f4:	59 f0       	breq	.+22     	; 0x210c <vfprintf+0x372>
    20f6:	a1 fe       	sbrs	r10, 1
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <vfprintf+0x364>
    20fa:	8b e2       	ldi	r24, 0x2B	; 43
    20fc:	01 c0       	rjmp	.+2      	; 0x2100 <vfprintf+0x366>
    20fe:	80 e2       	ldi	r24, 0x20	; 32
    2100:	a7 fc       	sbrc	r10, 7
    2102:	8d e2       	ldi	r24, 0x2D	; 45
    2104:	b6 01       	movw	r22, r12
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	0e 94 c4 10 	call	0x2188	; 0x2188 <fputc>
    210c:	89 14       	cp	r8, r9
    210e:	38 f4       	brcc	.+14     	; 0x211e <vfprintf+0x384>
    2110:	b6 01       	movw	r22, r12
    2112:	80 e3       	ldi	r24, 0x30	; 48
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	0e 94 c4 10 	call	0x2188	; 0x2188 <fputc>
    211a:	9a 94       	dec	r9
    211c:	f7 cf       	rjmp	.-18     	; 0x210c <vfprintf+0x372>
    211e:	8a 94       	dec	r8
    2120:	f3 01       	movw	r30, r6
    2122:	e8 0d       	add	r30, r8
    2124:	f1 1d       	adc	r31, r1
    2126:	80 81       	ld	r24, Z
    2128:	b6 01       	movw	r22, r12
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 c4 10 	call	0x2188	; 0x2188 <fputc>
    2130:	81 10       	cpse	r8, r1
    2132:	f5 cf       	rjmp	.-22     	; 0x211e <vfprintf+0x384>
    2134:	22 20       	and	r2, r2
    2136:	09 f4       	brne	.+2      	; 0x213a <vfprintf+0x3a0>
    2138:	42 ce       	rjmp	.-892    	; 0x1dbe <vfprintf+0x24>
    213a:	b6 01       	movw	r22, r12
    213c:	80 e2       	ldi	r24, 0x20	; 32
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	0e 94 c4 10 	call	0x2188	; 0x2188 <fputc>
    2144:	2a 94       	dec	r2
    2146:	f6 cf       	rjmp	.-20     	; 0x2134 <vfprintf+0x39a>
    2148:	f6 01       	movw	r30, r12
    214a:	86 81       	ldd	r24, Z+6	; 0x06
    214c:	97 81       	ldd	r25, Z+7	; 0x07
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <vfprintf+0x3ba>
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	9f ef       	ldi	r25, 0xFF	; 255
    2154:	2b 96       	adiw	r28, 0x0b	; 11
    2156:	e2 e1       	ldi	r30, 0x12	; 18
    2158:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__epilogue_restores__>

0000215c <strnlen_P>:
    215c:	fc 01       	movw	r30, r24
    215e:	05 90       	lpm	r0, Z+
    2160:	61 50       	subi	r22, 0x01	; 1
    2162:	70 40       	sbci	r23, 0x00	; 0
    2164:	01 10       	cpse	r0, r1
    2166:	d8 f7       	brcc	.-10     	; 0x215e <strnlen_P+0x2>
    2168:	80 95       	com	r24
    216a:	90 95       	com	r25
    216c:	8e 0f       	add	r24, r30
    216e:	9f 1f       	adc	r25, r31
    2170:	08 95       	ret

00002172 <strnlen>:
    2172:	fc 01       	movw	r30, r24
    2174:	61 50       	subi	r22, 0x01	; 1
    2176:	70 40       	sbci	r23, 0x00	; 0
    2178:	01 90       	ld	r0, Z+
    217a:	01 10       	cpse	r0, r1
    217c:	d8 f7       	brcc	.-10     	; 0x2174 <strnlen+0x2>
    217e:	80 95       	com	r24
    2180:	90 95       	com	r25
    2182:	8e 0f       	add	r24, r30
    2184:	9f 1f       	adc	r25, r31
    2186:	08 95       	ret

00002188 <fputc>:
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	fb 01       	movw	r30, r22
    2192:	23 81       	ldd	r18, Z+3	; 0x03
    2194:	21 fd       	sbrc	r18, 1
    2196:	03 c0       	rjmp	.+6      	; 0x219e <fputc+0x16>
    2198:	8f ef       	ldi	r24, 0xFF	; 255
    219a:	9f ef       	ldi	r25, 0xFF	; 255
    219c:	2c c0       	rjmp	.+88     	; 0x21f6 <fputc+0x6e>
    219e:	22 ff       	sbrs	r18, 2
    21a0:	16 c0       	rjmp	.+44     	; 0x21ce <fputc+0x46>
    21a2:	46 81       	ldd	r20, Z+6	; 0x06
    21a4:	57 81       	ldd	r21, Z+7	; 0x07
    21a6:	24 81       	ldd	r18, Z+4	; 0x04
    21a8:	35 81       	ldd	r19, Z+5	; 0x05
    21aa:	42 17       	cp	r20, r18
    21ac:	53 07       	cpc	r21, r19
    21ae:	44 f4       	brge	.+16     	; 0x21c0 <fputc+0x38>
    21b0:	a0 81       	ld	r26, Z
    21b2:	b1 81       	ldd	r27, Z+1	; 0x01
    21b4:	9d 01       	movw	r18, r26
    21b6:	2f 5f       	subi	r18, 0xFF	; 255
    21b8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ba:	31 83       	std	Z+1, r19	; 0x01
    21bc:	20 83       	st	Z, r18
    21be:	8c 93       	st	X, r24
    21c0:	26 81       	ldd	r18, Z+6	; 0x06
    21c2:	37 81       	ldd	r19, Z+7	; 0x07
    21c4:	2f 5f       	subi	r18, 0xFF	; 255
    21c6:	3f 4f       	sbci	r19, 0xFF	; 255
    21c8:	37 83       	std	Z+7, r19	; 0x07
    21ca:	26 83       	std	Z+6, r18	; 0x06
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <fputc+0x6e>
    21ce:	8b 01       	movw	r16, r22
    21d0:	ec 01       	movw	r28, r24
    21d2:	fb 01       	movw	r30, r22
    21d4:	00 84       	ldd	r0, Z+8	; 0x08
    21d6:	f1 85       	ldd	r31, Z+9	; 0x09
    21d8:	e0 2d       	mov	r30, r0
    21da:	09 95       	icall
    21dc:	89 2b       	or	r24, r25
    21de:	e1 f6       	brne	.-72     	; 0x2198 <fputc+0x10>
    21e0:	d8 01       	movw	r26, r16
    21e2:	16 96       	adiw	r26, 0x06	; 6
    21e4:	8d 91       	ld	r24, X+
    21e6:	9c 91       	ld	r25, X
    21e8:	17 97       	sbiw	r26, 0x07	; 7
    21ea:	01 96       	adiw	r24, 0x01	; 1
    21ec:	17 96       	adiw	r26, 0x07	; 7
    21ee:	9c 93       	st	X, r25
    21f0:	8e 93       	st	-X, r24
    21f2:	16 97       	sbiw	r26, 0x06	; 6
    21f4:	ce 01       	movw	r24, r28
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	1f 91       	pop	r17
    21fc:	0f 91       	pop	r16
    21fe:	08 95       	ret

00002200 <__ultoa_invert>:
    2200:	fa 01       	movw	r30, r20
    2202:	aa 27       	eor	r26, r26
    2204:	28 30       	cpi	r18, 0x08	; 8
    2206:	51 f1       	breq	.+84     	; 0x225c <__ultoa_invert+0x5c>
    2208:	20 31       	cpi	r18, 0x10	; 16
    220a:	81 f1       	breq	.+96     	; 0x226c <__ultoa_invert+0x6c>
    220c:	e8 94       	clt
    220e:	6f 93       	push	r22
    2210:	6e 7f       	andi	r22, 0xFE	; 254
    2212:	6e 5f       	subi	r22, 0xFE	; 254
    2214:	7f 4f       	sbci	r23, 0xFF	; 255
    2216:	8f 4f       	sbci	r24, 0xFF	; 255
    2218:	9f 4f       	sbci	r25, 0xFF	; 255
    221a:	af 4f       	sbci	r26, 0xFF	; 255
    221c:	b1 e0       	ldi	r27, 0x01	; 1
    221e:	3e d0       	rcall	.+124    	; 0x229c <__ultoa_invert+0x9c>
    2220:	b4 e0       	ldi	r27, 0x04	; 4
    2222:	3c d0       	rcall	.+120    	; 0x229c <__ultoa_invert+0x9c>
    2224:	67 0f       	add	r22, r23
    2226:	78 1f       	adc	r23, r24
    2228:	89 1f       	adc	r24, r25
    222a:	9a 1f       	adc	r25, r26
    222c:	a1 1d       	adc	r26, r1
    222e:	68 0f       	add	r22, r24
    2230:	79 1f       	adc	r23, r25
    2232:	8a 1f       	adc	r24, r26
    2234:	91 1d       	adc	r25, r1
    2236:	a1 1d       	adc	r26, r1
    2238:	6a 0f       	add	r22, r26
    223a:	71 1d       	adc	r23, r1
    223c:	81 1d       	adc	r24, r1
    223e:	91 1d       	adc	r25, r1
    2240:	a1 1d       	adc	r26, r1
    2242:	20 d0       	rcall	.+64     	; 0x2284 <__ultoa_invert+0x84>
    2244:	09 f4       	brne	.+2      	; 0x2248 <__ultoa_invert+0x48>
    2246:	68 94       	set
    2248:	3f 91       	pop	r19
    224a:	2a e0       	ldi	r18, 0x0A	; 10
    224c:	26 9f       	mul	r18, r22
    224e:	11 24       	eor	r1, r1
    2250:	30 19       	sub	r19, r0
    2252:	30 5d       	subi	r19, 0xD0	; 208
    2254:	31 93       	st	Z+, r19
    2256:	de f6       	brtc	.-74     	; 0x220e <__ultoa_invert+0xe>
    2258:	cf 01       	movw	r24, r30
    225a:	08 95       	ret
    225c:	46 2f       	mov	r20, r22
    225e:	47 70       	andi	r20, 0x07	; 7
    2260:	40 5d       	subi	r20, 0xD0	; 208
    2262:	41 93       	st	Z+, r20
    2264:	b3 e0       	ldi	r27, 0x03	; 3
    2266:	0f d0       	rcall	.+30     	; 0x2286 <__ultoa_invert+0x86>
    2268:	c9 f7       	brne	.-14     	; 0x225c <__ultoa_invert+0x5c>
    226a:	f6 cf       	rjmp	.-20     	; 0x2258 <__ultoa_invert+0x58>
    226c:	46 2f       	mov	r20, r22
    226e:	4f 70       	andi	r20, 0x0F	; 15
    2270:	40 5d       	subi	r20, 0xD0	; 208
    2272:	4a 33       	cpi	r20, 0x3A	; 58
    2274:	18 f0       	brcs	.+6      	; 0x227c <__ultoa_invert+0x7c>
    2276:	49 5d       	subi	r20, 0xD9	; 217
    2278:	31 fd       	sbrc	r19, 1
    227a:	40 52       	subi	r20, 0x20	; 32
    227c:	41 93       	st	Z+, r20
    227e:	02 d0       	rcall	.+4      	; 0x2284 <__ultoa_invert+0x84>
    2280:	a9 f7       	brne	.-22     	; 0x226c <__ultoa_invert+0x6c>
    2282:	ea cf       	rjmp	.-44     	; 0x2258 <__ultoa_invert+0x58>
    2284:	b4 e0       	ldi	r27, 0x04	; 4
    2286:	a6 95       	lsr	r26
    2288:	97 95       	ror	r25
    228a:	87 95       	ror	r24
    228c:	77 95       	ror	r23
    228e:	67 95       	ror	r22
    2290:	ba 95       	dec	r27
    2292:	c9 f7       	brne	.-14     	; 0x2286 <__ultoa_invert+0x86>
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	61 05       	cpc	r22, r1
    2298:	71 05       	cpc	r23, r1
    229a:	08 95       	ret
    229c:	9b 01       	movw	r18, r22
    229e:	ac 01       	movw	r20, r24
    22a0:	0a 2e       	mov	r0, r26
    22a2:	06 94       	lsr	r0
    22a4:	57 95       	ror	r21
    22a6:	47 95       	ror	r20
    22a8:	37 95       	ror	r19
    22aa:	27 95       	ror	r18
    22ac:	ba 95       	dec	r27
    22ae:	c9 f7       	brne	.-14     	; 0x22a2 <__ultoa_invert+0xa2>
    22b0:	62 0f       	add	r22, r18
    22b2:	73 1f       	adc	r23, r19
    22b4:	84 1f       	adc	r24, r20
    22b6:	95 1f       	adc	r25, r21
    22b8:	a0 1d       	adc	r26, r0
    22ba:	08 95       	ret

000022bc <eeprom_read_dword>:
    22bc:	a6 e1       	ldi	r26, 0x16	; 22
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	44 e0       	ldi	r20, 0x04	; 4
    22c2:	50 e0       	ldi	r21, 0x00	; 0
    22c4:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <eeprom_read_blraw>

000022c8 <eeprom_read_word>:
    22c8:	a8 e1       	ldi	r26, 0x18	; 24
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	42 e0       	ldi	r20, 0x02	; 2
    22ce:	50 e0       	ldi	r21, 0x00	; 0
    22d0:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <eeprom_read_blraw>

000022d4 <eeprom_write_dword>:
    22d4:	24 2f       	mov	r18, r20
    22d6:	0e 94 88 11 	call	0x2310	; 0x2310 <eeprom_write_r18>
    22da:	25 2f       	mov	r18, r21
    22dc:	0e 94 88 11 	call	0x2310	; 0x2310 <eeprom_write_r18>
    22e0:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <eeprom_write_word>

000022e4 <eeprom_write_word>:
    22e4:	0e 94 87 11 	call	0x230e	; 0x230e <eeprom_write_byte>
    22e8:	27 2f       	mov	r18, r23
    22ea:	0c 94 88 11 	jmp	0x2310	; 0x2310 <eeprom_write_r18>

000022ee <eeprom_read_block>:
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22

000022f2 <eeprom_read_blraw>:
    22f2:	fc 01       	movw	r30, r24
    22f4:	f9 99       	sbic	0x1f, 1	; 31
    22f6:	fe cf       	rjmp	.-4      	; 0x22f4 <eeprom_read_blraw+0x2>
    22f8:	06 c0       	rjmp	.+12     	; 0x2306 <eeprom_read_blraw+0x14>
    22fa:	f2 bd       	out	0x22, r31	; 34
    22fc:	e1 bd       	out	0x21, r30	; 33
    22fe:	f8 9a       	sbi	0x1f, 0	; 31
    2300:	31 96       	adiw	r30, 0x01	; 1
    2302:	00 b4       	in	r0, 0x20	; 32
    2304:	0d 92       	st	X+, r0
    2306:	41 50       	subi	r20, 0x01	; 1
    2308:	50 40       	sbci	r21, 0x00	; 0
    230a:	b8 f7       	brcc	.-18     	; 0x22fa <eeprom_read_blraw+0x8>
    230c:	08 95       	ret

0000230e <eeprom_write_byte>:
    230e:	26 2f       	mov	r18, r22

00002310 <eeprom_write_r18>:
    2310:	f9 99       	sbic	0x1f, 1	; 31
    2312:	fe cf       	rjmp	.-4      	; 0x2310 <eeprom_write_r18>
    2314:	1f ba       	out	0x1f, r1	; 31
    2316:	92 bd       	out	0x22, r25	; 34
    2318:	81 bd       	out	0x21, r24	; 33
    231a:	20 bd       	out	0x20, r18	; 32
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	fa 9a       	sbi	0x1f, 2	; 31
    2322:	f9 9a       	sbi	0x1f, 1	; 31
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	01 96       	adiw	r24, 0x01	; 1
    2328:	08 95       	ret

0000232a <__prologue_saves__>:
    232a:	2f 92       	push	r2
    232c:	3f 92       	push	r3
    232e:	4f 92       	push	r4
    2330:	5f 92       	push	r5
    2332:	6f 92       	push	r6
    2334:	7f 92       	push	r7
    2336:	8f 92       	push	r8
    2338:	9f 92       	push	r9
    233a:	af 92       	push	r10
    233c:	bf 92       	push	r11
    233e:	cf 92       	push	r12
    2340:	df 92       	push	r13
    2342:	ef 92       	push	r14
    2344:	ff 92       	push	r15
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	ca 1b       	sub	r28, r26
    2354:	db 0b       	sbc	r29, r27
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	09 94       	ijmp

00002362 <__epilogue_restores__>:
    2362:	2a 88       	ldd	r2, Y+18	; 0x12
    2364:	39 88       	ldd	r3, Y+17	; 0x11
    2366:	48 88       	ldd	r4, Y+16	; 0x10
    2368:	5f 84       	ldd	r5, Y+15	; 0x0f
    236a:	6e 84       	ldd	r6, Y+14	; 0x0e
    236c:	7d 84       	ldd	r7, Y+13	; 0x0d
    236e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2370:	9b 84       	ldd	r9, Y+11	; 0x0b
    2372:	aa 84       	ldd	r10, Y+10	; 0x0a
    2374:	b9 84       	ldd	r11, Y+9	; 0x09
    2376:	c8 84       	ldd	r12, Y+8	; 0x08
    2378:	df 80       	ldd	r13, Y+7	; 0x07
    237a:	ee 80       	ldd	r14, Y+6	; 0x06
    237c:	fd 80       	ldd	r15, Y+5	; 0x05
    237e:	0c 81       	ldd	r16, Y+4	; 0x04
    2380:	1b 81       	ldd	r17, Y+3	; 0x03
    2382:	aa 81       	ldd	r26, Y+2	; 0x02
    2384:	b9 81       	ldd	r27, Y+1	; 0x01
    2386:	ce 0f       	add	r28, r30
    2388:	d1 1d       	adc	r29, r1
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	ed 01       	movw	r28, r26
    2396:	08 95       	ret

00002398 <_exit>:
    2398:	f8 94       	cli

0000239a <__stop_program>:
    239a:	ff cf       	rjmp	.-2      	; 0x239a <__stop_program>
